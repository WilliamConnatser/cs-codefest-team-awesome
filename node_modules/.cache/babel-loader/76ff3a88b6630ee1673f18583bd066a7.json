{"ast":null,"code":"import { round } from \"../utils/NumberUtils\";\n\nclass Loan {\n  constructor(rate, term, amt) {\n    this.rate = rate; //in annual pct\n\n    this.term = term; //in months\n\n    this.originalAmt = amt; //starting balance\n\n    this.balance = amt;\n  }\n\n  getMinPayment() {\n    const ratePerPeriod = this.rate / 12;\n    const factor = (1 + ratePerPeriod) ** this.term;\n    const minPayment = this.originalAmt * (ratePerPeriod * factor / (factor - 1));\n    return round(minPayment, 2);\n  }\n\n  getInterestDue() {\n    return round(this.balance * this.rate / 12, 2);\n  }\n\n  getBalance() {\n    return this.balance;\n  }\n\n  makePayment(amt) {\n    const interest = this.getInterestDue();\n    const principalReduction = amt - interest;\n\n    if (principalReduction >= this.balance) {\n      this.balance = 0;\n    } else {\n      this.balance -= principalReduction;\n    }\n  }\n\n  makePrincipalPayment(amt) {\n    this.balance -= amt;\n  }\n\n}\n\nexport default Loan;","map":{"version":3,"sources":["/Users/reappdev/repos/iwealth-tax-lien-calculator/src/models/loan.jsx"],"names":["round","Loan","constructor","rate","term","amt","originalAmt","balance","getMinPayment","ratePerPeriod","factor","minPayment","getInterestDue","getBalance","makePayment","interest","principalReduction","makePrincipalPayment"],"mappings":"AAAA,SAASA,KAAT,QAAsB,sBAAtB;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,IAAD,EAAOC,IAAP,EAAaC,GAAb,EAAkB;AAC3B,SAAKF,IAAL,GAAYA,IAAZ,CAD2B,CACT;;AAClB,SAAKC,IAAL,GAAYA,IAAZ,CAF2B,CAET;;AAClB,SAAKE,WAAL,GAAmBD,GAAnB,CAH2B,CAGH;;AACxB,SAAKE,OAAL,GAAeF,GAAf;AACD;;AAEDG,EAAAA,aAAa,GAAG;AACd,UAAMC,aAAa,GAAG,KAAKN,IAAL,GAAY,EAAlC;AACA,UAAMO,MAAM,GAAG,CAAC,IAAID,aAAL,KAAuB,KAAKL,IAA3C;AACA,UAAMO,UAAU,GACd,KAAKL,WAAL,IAAqBG,aAAa,GAAGC,MAAjB,IAA4BA,MAAM,GAAG,CAArC,CAApB,CADF;AAEA,WAAOV,KAAK,CAACW,UAAD,EAAa,CAAb,CAAZ;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,WAAOZ,KAAK,CAAE,KAAKO,OAAL,GAAe,KAAKJ,IAArB,GAA6B,EAA9B,EAAkC,CAAlC,CAAZ;AACD;;AAEDU,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKN,OAAZ;AACD;;AAEDO,EAAAA,WAAW,CAACT,GAAD,EAAM;AACf,UAAMU,QAAQ,GAAG,KAAKH,cAAL,EAAjB;AACA,UAAMI,kBAAkB,GAAGX,GAAG,GAAGU,QAAjC;;AAEA,QAAIC,kBAAkB,IAAI,KAAKT,OAA/B,EAAwC;AACtC,WAAKA,OAAL,GAAe,CAAf;AACD,KAFD,MAEO;AACL,WAAKA,OAAL,IAAgBS,kBAAhB;AACD;AACF;;AAEDC,EAAAA,oBAAoB,CAACZ,GAAD,EAAM;AACxB,SAAKE,OAAL,IAAgBF,GAAhB;AACD;;AArCQ;;AAwCX,eAAeJ,IAAf","sourcesContent":["import { round } from \"../utils/NumberUtils\";\n\nclass Loan {\n  constructor(rate, term, amt) {\n    this.rate = rate; //in annual pct\n    this.term = term; //in months\n    this.originalAmt = amt; //starting balance\n    this.balance = amt;\n  }\n\n  getMinPayment() {\n    const ratePerPeriod = this.rate / 12;\n    const factor = (1 + ratePerPeriod) ** this.term;\n    const minPayment =\n      this.originalAmt * ((ratePerPeriod * factor) / (factor - 1));\n    return round(minPayment, 2);\n  }\n\n  getInterestDue() {\n    return round((this.balance * this.rate) / 12, 2);\n  }\n\n  getBalance() {\n    return this.balance;\n  }\n\n  makePayment(amt) {\n    const interest = this.getInterestDue();\n    const principalReduction = amt - interest;\n\n    if (principalReduction >= this.balance) {\n      this.balance = 0;\n    } else {\n      this.balance -= principalReduction;\n    }\n  }\n\n  makePrincipalPayment(amt) {\n    this.balance -= amt;\n  }\n}\n\nexport default Loan;\n"]},"metadata":{},"sourceType":"module"}