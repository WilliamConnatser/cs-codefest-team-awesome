{"ast":null,"code":"import _objectSpread from \"/Users/reappdev/repos/iwealth-tax-lien-calculator/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/reappdev/repos/iwealth-tax-lien-calculator/src/components/home/home.jsx\";\nimport React, { Component } from \"react\";\nimport queryString from \"query-string\";\nimport InputForm from \"../inputForm/inputForm\";\nimport ResultsTable from \"../resultsTable/resultsTable\";\nimport { getDefaults } from \"./../../services/fakeDefaultService\";\nimport Investor from \"../../models/investor\";\nimport { getActiveStates } from \"../../services/fakeStateService\";\nimport _ from \"lodash\";\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      investorInformation: {\n        secondaryMarket: false,\n        startDate: \"\",\n        passiveIncomeGoal: \"\",\n        investmentCapital: \"\",\n        netRentBreakdown: {\n          paydownDebtPct: 0,\n          reinvestPct: 0,\n          spendPct: 0\n        },\n        locations: [],\n        lienCosts: [],\n        lienInterestRates: []\n      },\n      dealInformation: {\n        redemptionRatio: 0,\n        avgGrossRent: 0,\n        expenses: {\n          management: 0,\n          vacancy: 0,\n          repair: 0\n        }\n      },\n      renoInformation: {\n        avgRenoDuration: 0,\n        avgRenoCost: 0,\n        loanRate: 0,\n        loanTerm: 0\n      },\n      serviceType: {\n        setup: false,\n        recurring: false\n      },\n      periods: [],\n      errors: {\n        investorForm: {},\n        renoForm: {}\n      }\n    };\n\n    this.validateProperty = input => {\n      if (input.name === \"investorInformation.passiveIncomeGoal\") {\n        if (input.value < 1) return \"Passive Income Goal is required.\"; // ...\n      }\n    };\n\n    this.handleNumberInputChange = ({\n      currentTarget: input\n    }) => {\n      const parentObjName = input.name.split(\".\")[0];\n      const path = input.name.replace(parentObjName + \".\", \"\");\n\n      const errors = _objectSpread({}, this.state.errors);\n\n      const errorMessage = this.validateProperty(input);\n      if (errorMessage) _.set(errors, input.name, errorMessage);else _.unset(errors, input.name);\n\n      const objCopy = _objectSpread({}, this.state[parentObjName]);\n\n      _.set(objCopy, path, input.value);\n\n      this.setState({\n        [parentObjName]: objCopy,\n        errors: errors\n      });\n    };\n\n    this.handleDateChange = startDate => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      investorInformation.startDate = startDate;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleNetRentPreferenceChange = ({\n      currentTarget: input\n    }) => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      const netRentBreakdown = _objectSpread({}, this.state.investorInformation.netRentBreakdown);\n\n      let value = parseInt(input.value);\n\n      if (!value) {\n        netRentBreakdown[input.name] = \"\";\n        let delta = 0 - this.state.investorInformation.netRentBreakdown[input.name];\n        let deltas = delta % 2 !== 0 ? [Math.floor(delta / 2), Math.ceil(delta / 2)] : [delta / 2, delta / 2];\n\n        switch (input.name) {\n          case \"spendPct\":\n            netRentBreakdown.reinvestPct -= Math.ceil(delta * (netRentBreakdown.reinvestPct / (netRentBreakdown.reinvestPct + netRentBreakdown.paydownDebtPct))) || deltas[0];\n            netRentBreakdown.paydownDebtPct = 100 - (0 + netRentBreakdown.reinvestPct);\n            break;\n\n          case \"paydownDebtPct\":\n            netRentBreakdown.reinvestPct -= delta;\n            break;\n\n          case \"reinvestPct\":\n            netRentBreakdown.paydownDebtPct -= delta;\n            break;\n\n          default:\n            netRentBreakdown.spendPct = 10;\n            netRentBreakdown.paydownDebtPct = 90;\n            netRentBreakdown.reinvestPct = 0;\n            break;\n        }\n\n        investorInformation.netRentBreakdown = netRentBreakdown;\n        this.setState({\n          investorInformation\n        });\n        return;\n      } // If user inputs 100, zero out other two (let them override)\n\n\n      if (value === 100) {\n        netRentBreakdown[input.name] = 100;\n\n        for (let key in netRentBreakdown) {\n          if (key !== input.name) {\n            netRentBreakdown[key] = 0;\n          }\n        }\n\n        investorInformation.netRentBreakdown = netRentBreakdown;\n        this.setState({\n          investorInformation\n        });\n        return;\n      } // Don't let user enter a value that would result in\n      // a total greather than 100%\n\n\n      if (input.name !== \"spendPct\" && value > 100 - netRentBreakdown.spendPct) {\n        value = 100 - netRentBreakdown.spendPct;\n      } else if (input.name === \"spendPct\" && value > 100) {\n        value = 100;\n      } // Don't let a user enter a negative value\n\n\n      if (value < 0) value = 0;\n      netRentBreakdown[input.name] = value;\n      let delta = value - this.state.investorInformation.netRentBreakdown[input.name];\n      let deltas = delta % 2 !== 0 ? [Math.floor(delta / 2), Math.ceil(delta / 2)] : [delta / 2, delta / 2];\n\n      switch (input.name) {\n        case \"spendPct\":\n          netRentBreakdown.reinvestPct -= Math.ceil(delta * (netRentBreakdown.reinvestPct / (netRentBreakdown.reinvestPct + netRentBreakdown.paydownDebtPct))) || deltas[0];\n          netRentBreakdown.paydownDebtPct = 100 - (Math.abs(value) + netRentBreakdown.reinvestPct);\n          break;\n\n        case \"paydownDebtPct\":\n          netRentBreakdown.reinvestPct -= delta;\n          break;\n\n        case \"reinvestPct\":\n          netRentBreakdown.paydownDebtPct -= delta;\n          break;\n\n        default:\n          netRentBreakdown.spendPct = 10;\n          netRentBreakdown.paydownDebtPct = 90;\n          netRentBreakdown.reinvestPct = 0;\n          break;\n      }\n\n      investorInformation.netRentBreakdown = netRentBreakdown;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleLocationChange = ({\n      currentTarget: input\n    }) => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      const activeStates = getActiveStates();\n      const newState = activeStates.find(location => location.abbreviation === input.value);\n      const changedIndex = input.name.split(\"-\")[1];\n      investorInformation.locations[changedIndex] = newState;\n      investorInformation.lienCosts[changedIndex] = {\n        avgLienCostLiveAuction: newState.avgLienCostLiveAuction,\n        avgLienCostSecondary: newState.avgLienCostSecondary\n      };\n      investorInformation.lienInterestRates[changedIndex] = newState.avgLienInterestRate;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleLienCostChange = ({\n      currentTarget: input\n    }) => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      const changedIndex = input.name.split(\"-\")[1];\n      const changedField = input.name.split(\"-\")[0];\n\n      if (input.value < 0) {\n        input.value = 0;\n      }\n\n      investorInformation.lienCosts[changedIndex][changedField] = parseInt(input.value.replace(/\\b0+/g, \"\")) || 0;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleLienInterestChange = ({\n      currentTarget: input\n    }) => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      const changedIndex = input.name.split(\"-\")[1];\n\n      if (input.value < 0) {\n        input.value = 0;\n      }\n\n      console.log(parseInt(input.value.replace(/\\b0+/g, \"\")) || 0);\n      investorInformation.lienInterestRates[changedIndex] = parseInt(input.value.replace(/\\b0+/g, \"\")) || 0;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleSecondaryMarketChange = ({\n      currentTarget: input\n    }) => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      investorInformation.secondaryMarket = input.checked;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleSliderChange = (value, objName, path) => {\n      let objCopy = _objectSpread({}, this.state[objName]);\n\n      _.set(objCopy, path, value);\n\n      this.setState({\n        [objName]: objCopy\n      });\n    };\n\n    this.handleServiceTypeChange = ({\n      currentTarget: input\n    }) => {\n      let serviceType = _objectSpread({}, this.state.serviceType);\n\n      for (let key in serviceType) {\n        serviceType[key] = false;\n      }\n\n      serviceType[input.value] = true;\n      this.setState({\n        serviceType\n      });\n    };\n\n    this.validate = () => {\n      return {\n        passiveIncomeGoal: \"You are asking for too little.\"\n      };\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const errors = this.validate();\n      this.setState({\n        errors: {\n          investorForm: errors\n        }\n      });\n      if (errors) return; //create investor & simulate process.\n\n      const investor = new Investor(this.state);\n      investor.simulate().then(periods => {\n        this.setState({\n          periods\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    // Get Defaults\n    const _getDefaults = getDefaults(),\n          investorInformation = _getDefaults.investorInformation,\n          dealInformation = _getDefaults.dealInformation,\n          renoInformation = _getDefaults.renoInformation,\n          serviceType = _getDefaults.serviceType; // Set investment start date to next month by default.\n\n\n    let today = new Date();\n    let startDate = new Date(today);\n    startDate.setUTCMonth(startDate.getUTCMonth() + 1);\n    startDate.setUTCDate(1);\n    investorInformation.startDate = startDate;\n    this.setState({\n      investorInformation,\n      dealInformation,\n      renoInformation,\n      serviceType\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          errors = _this$state.errors,\n          investorInformation = _this$state.investorInformation,\n          dealInformation = _this$state.dealInformation,\n          renoInformation = _this$state.renoInformation,\n          serviceType = _this$state.serviceType;\n    const location = this.props.location;\n    const optionalParams = queryString.parse(location.search);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(InputForm, {\n      errors: errors,\n      investorInformation: investorInformation,\n      dealInformation: dealInformation,\n      renoInformation: renoInformation,\n      serviceType: serviceType,\n      onDateChange: this.handleDateChange,\n      onNumberInputChange: this.handleNumberInputChange,\n      onSliderChange: this.handleSliderChange,\n      onNetRentPreferenceChange: this.handleNetRentPreferenceChange,\n      onLocationChange: this.handleLocationChange,\n      onLienCostChange: this.handleLienCostChange,\n      onLienInterestChange: this.handleLienInterestChange,\n      onSecondaryMarketChange: this.handleSecondaryMarketChange,\n      onServiceTypeChange: this.handleServiceTypeChange,\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        marginTop: \"50px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(ResultsTable, {\n      periods: this.state.periods,\n      investorInformation: investorInformation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Home; // Outputs\n// Should be a schedule that can be viewed as years (aggregated values) or months\n// Should last 24 Months after Investment Goal is hit\n// PHase 2 Consideration --- people can pick fields to add to output.\n// Period\n// Date\n// Invetment Capital\n// Liens Purchased\n// Housed Acquired\n// Outstanding Debt\n// Passive Rental Income\n// *****************************\n// General Comments\n// *****************************\n// (1) Limiting Location Options: Instead of letting users pick any state\n// we will reduce this to a managed system where\n// iWealthRE's subject matter expertise is.\n// (2) Buying Location Preference: We should let users pick\n// their top three states.\n// (3) Research Time: If I get money in July, I can't spend it at a\n// live auction until August. This is because I need a minimum of\n// 1 month to do research on properties. (make this a variable)\n// (4) Lien cost on Secondary Market: Typical lien cost on the\n// secondary market is 1 year tax plus some premium. This is the\n// average redemptive value. Essentially, secondary buyers have to pay extra\n// for not having to wait for the lien to mature. An important note here,\n// when a person buys a lien on the seondary market timport Investor from './../../models/investor';\n// will not be on the redemptive value, rather it will be on the original\n// lien cost (which will be less than the redemptive cost).\n// (5) Tool should assume live auction.\n// -In which case we will show only the live auction lien vlaue\n// -next to state option drop down\n// -\n// -If user toggles secondary\n// -then we will only show them the secondary lien costs","map":{"version":3,"sources":["/Users/reappdev/repos/iwealth-tax-lien-calculator/src/components/home/home.jsx"],"names":["React","Component","queryString","InputForm","ResultsTable","getDefaults","Investor","getActiveStates","_","Home","state","investorInformation","secondaryMarket","startDate","passiveIncomeGoal","investmentCapital","netRentBreakdown","paydownDebtPct","reinvestPct","spendPct","locations","lienCosts","lienInterestRates","dealInformation","redemptionRatio","avgGrossRent","expenses","management","vacancy","repair","renoInformation","avgRenoDuration","avgRenoCost","loanRate","loanTerm","serviceType","setup","recurring","periods","errors","investorForm","renoForm","validateProperty","input","name","value","handleNumberInputChange","currentTarget","parentObjName","split","path","replace","errorMessage","set","unset","objCopy","setState","handleDateChange","handleNetRentPreferenceChange","parseInt","delta","deltas","Math","floor","ceil","key","abs","handleLocationChange","activeStates","newState","find","location","abbreviation","changedIndex","avgLienCostLiveAuction","avgLienCostSecondary","avgLienInterestRate","handleLienCostChange","changedField","handleLienInterestChange","console","log","handleSecondaryMarketChange","checked","handleSliderChange","objName","handleServiceTypeChange","validate","handleSubmit","e","preventDefault","investor","simulate","then","componentDidMount","today","Date","setUTCMonth","getUTCMonth","setUTCDate","render","props","optionalParams","parse","search","marginTop"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,MAAMC,IAAN,SAAmBR,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC3BS,KAD2B,GACnB;AACNC,MAAAA,mBAAmB,EAAE;AACnBC,QAAAA,eAAe,EAAE,KADE;AAEnBC,QAAAA,SAAS,EAAE,EAFQ;AAGnBC,QAAAA,iBAAiB,EAAE,EAHA;AAInBC,QAAAA,iBAAiB,EAAE,EAJA;AAKnBC,QAAAA,gBAAgB,EAAE;AAChBC,UAAAA,cAAc,EAAE,CADA;AAEhBC,UAAAA,WAAW,EAAE,CAFG;AAGhBC,UAAAA,QAAQ,EAAE;AAHM,SALC;AAUnBC,QAAAA,SAAS,EAAE,EAVQ;AAWnBC,QAAAA,SAAS,EAAE,EAXQ;AAYnBC,QAAAA,iBAAiB,EAAE;AAZA,OADf;AAeNC,MAAAA,eAAe,EAAE;AACfC,QAAAA,eAAe,EAAE,CADF;AAEfC,QAAAA,YAAY,EAAE,CAFC;AAGfC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,UAAU,EAAE,CADJ;AAERC,UAAAA,OAAO,EAAE,CAFD;AAGRC,UAAAA,MAAM,EAAE;AAHA;AAHK,OAfX;AAwBNC,MAAAA,eAAe,EAAE;AACfC,QAAAA,eAAe,EAAE,CADF;AAEfC,QAAAA,WAAW,EAAE,CAFE;AAGfC,QAAAA,QAAQ,EAAE,CAHK;AAIfC,QAAAA,QAAQ,EAAE;AAJK,OAxBX;AA8BNC,MAAAA,WAAW,EAAE;AACXC,QAAAA,KAAK,EAAE,KADI;AAEXC,QAAAA,SAAS,EAAE;AAFA,OA9BP;AAkCNC,MAAAA,OAAO,EAAE,EAlCH;AAmCNC,MAAAA,MAAM,EAAE;AACNC,QAAAA,YAAY,EAAE,EADR;AAENC,QAAAA,QAAQ,EAAE;AAFJ;AAnCF,KADmB;;AAAA,SAkE3BC,gBAlE2B,GAkERC,KAAK,IAAI;AAC1B,UAAIA,KAAK,CAACC,IAAN,KAAe,uCAAnB,EAA4D;AAC1D,YAAID,KAAK,CAACE,KAAN,GAAc,CAAlB,EAAqB,OAAO,kCAAP,CADqC,CAE1D;AACD;AACF,KAvE0B;;AAAA,SAyE3BC,uBAzE2B,GAyED,CAAC;AAAEC,MAAAA,aAAa,EAAEJ;AAAjB,KAAD,KAA8B;AACtD,YAAMK,aAAa,GAAGL,KAAK,CAACC,IAAN,CAAWK,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAtB;AACA,YAAMC,IAAI,GAAGP,KAAK,CAACC,IAAN,CAAWO,OAAX,CAAmBH,aAAa,GAAG,GAAnC,EAAwC,EAAxC,CAAb;;AAEA,YAAMT,MAAM,qBAAQ,KAAK7B,KAAL,CAAW6B,MAAnB,CAAZ;;AACA,YAAMa,YAAY,GAAG,KAAKV,gBAAL,CAAsBC,KAAtB,CAArB;AAEA,UAAIS,YAAJ,EAAkB5C,CAAC,CAAC6C,GAAF,CAAMd,MAAN,EAAcI,KAAK,CAACC,IAApB,EAA0BQ,YAA1B,EAAlB,KACK5C,CAAC,CAAC8C,KAAF,CAAQf,MAAR,EAAgBI,KAAK,CAACC,IAAtB;;AAEL,YAAMW,OAAO,qBAAQ,KAAK7C,KAAL,CAAWsC,aAAX,CAAR,CAAb;;AACAxC,MAAAA,CAAC,CAAC6C,GAAF,CAAME,OAAN,EAAeL,IAAf,EAAqBP,KAAK,CAACE,KAA3B;;AACA,WAAKW,QAAL,CAAc;AAAE,SAACR,aAAD,GAAiBO,OAAnB;AAA4BhB,QAAAA,MAAM,EAAEA;AAApC,OAAd;AACD,KAtF0B;;AAAA,SAwF3BkB,gBAxF2B,GAwFR5C,SAAS,IAAI;AAC9B,YAAMF,mBAAmB,qBAAQ,KAAKD,KAAL,CAAWC,mBAAnB,CAAzB;;AACAA,MAAAA,mBAAmB,CAACE,SAApB,GAAgCA,SAAhC;AACA,WAAK2C,QAAL,CAAc;AAAE7C,QAAAA;AAAF,OAAd;AACD,KA5F0B;;AAAA,SA8F3B+C,6BA9F2B,GA8FK,CAAC;AAAEX,MAAAA,aAAa,EAAEJ;AAAjB,KAAD,KAA8B;AAC5D,YAAMhC,mBAAmB,qBAAQ,KAAKD,KAAL,CAAWC,mBAAnB,CAAzB;;AACA,YAAMK,gBAAgB,qBACjB,KAAKN,KAAL,CAAWC,mBAAX,CAA+BK,gBADd,CAAtB;;AAIA,UAAI6B,KAAK,GAAGc,QAAQ,CAAChB,KAAK,CAACE,KAAP,CAApB;;AAEA,UAAI,CAACA,KAAL,EAAY;AACV7B,QAAAA,gBAAgB,CAAC2B,KAAK,CAACC,IAAP,CAAhB,GAA+B,EAA/B;AACA,YAAIgB,KAAK,GACP,IAAI,KAAKlD,KAAL,CAAWC,mBAAX,CAA+BK,gBAA/B,CAAgD2B,KAAK,CAACC,IAAtD,CADN;AAEA,YAAIiB,MAAM,GACRD,KAAK,GAAG,CAAR,KAAc,CAAd,GACI,CAACE,IAAI,CAACC,KAAL,CAAWH,KAAK,GAAG,CAAnB,CAAD,EAAwBE,IAAI,CAACE,IAAL,CAAUJ,KAAK,GAAG,CAAlB,CAAxB,CADJ,GAEI,CAACA,KAAK,GAAG,CAAT,EAAYA,KAAK,GAAG,CAApB,CAHN;;AAKA,gBAAQjB,KAAK,CAACC,IAAd;AACE,eAAK,UAAL;AACE5B,YAAAA,gBAAgB,CAACE,WAAjB,IACE4C,IAAI,CAACE,IAAL,CACEJ,KAAK,IACF5C,gBAAgB,CAACE,WAAjB,IACEF,gBAAgB,CAACE,WAAjB,GACCF,gBAAgB,CAACC,cAFpB,CADE,CADP,KAKK4C,MAAM,CAAC,CAAD,CANb;AAOA7C,YAAAA,gBAAgB,CAACC,cAAjB,GACE,OAAO,IAAID,gBAAgB,CAACE,WAA5B,CADF;AAEA;;AACF,eAAK,gBAAL;AACEF,YAAAA,gBAAgB,CAACE,WAAjB,IAAgC0C,KAAhC;AACA;;AACF,eAAK,aAAL;AACE5C,YAAAA,gBAAgB,CAACC,cAAjB,IAAmC2C,KAAnC;AACA;;AACF;AACE5C,YAAAA,gBAAgB,CAACG,QAAjB,GAA4B,EAA5B;AACAH,YAAAA,gBAAgB,CAACC,cAAjB,GAAkC,EAAlC;AACAD,YAAAA,gBAAgB,CAACE,WAAjB,GAA+B,CAA/B;AACA;AAtBJ;;AAwBAP,QAAAA,mBAAmB,CAACK,gBAApB,GAAuCA,gBAAvC;AACA,aAAKwC,QAAL,CAAc;AAAE7C,UAAAA;AAAF,SAAd;AACA;AACD,OA5C2D,CA8C5D;;;AACA,UAAIkC,KAAK,KAAK,GAAd,EAAmB;AACjB7B,QAAAA,gBAAgB,CAAC2B,KAAK,CAACC,IAAP,CAAhB,GAA+B,GAA/B;;AACA,aAAK,IAAIqB,GAAT,IAAgBjD,gBAAhB,EAAkC;AAChC,cAAIiD,GAAG,KAAKtB,KAAK,CAACC,IAAlB,EAAwB;AACtB5B,YAAAA,gBAAgB,CAACiD,GAAD,CAAhB,GAAwB,CAAxB;AACD;AACF;;AACDtD,QAAAA,mBAAmB,CAACK,gBAApB,GAAuCA,gBAAvC;AACA,aAAKwC,QAAL,CAAc;AAAE7C,UAAAA;AAAF,SAAd;AACA;AACD,OAzD2D,CA2D5D;AACA;;;AACA,UAAIgC,KAAK,CAACC,IAAN,KAAe,UAAf,IAA6BC,KAAK,GAAG,MAAM7B,gBAAgB,CAACG,QAAhE,EAA0E;AACxE0B,QAAAA,KAAK,GAAG,MAAM7B,gBAAgB,CAACG,QAA/B;AACD,OAFD,MAEO,IAAIwB,KAAK,CAACC,IAAN,KAAe,UAAf,IAA6BC,KAAK,GAAG,GAAzC,EAA8C;AACnDA,QAAAA,KAAK,GAAG,GAAR;AACD,OAjE2D,CAmE5D;;;AACA,UAAIA,KAAK,GAAG,CAAZ,EAAeA,KAAK,GAAG,CAAR;AAEf7B,MAAAA,gBAAgB,CAAC2B,KAAK,CAACC,IAAP,CAAhB,GAA+BC,KAA/B;AAEA,UAAIe,KAAK,GACPf,KAAK,GAAG,KAAKnC,KAAL,CAAWC,mBAAX,CAA+BK,gBAA/B,CAAgD2B,KAAK,CAACC,IAAtD,CADV;AAEA,UAAIiB,MAAM,GACRD,KAAK,GAAG,CAAR,KAAc,CAAd,GACI,CAACE,IAAI,CAACC,KAAL,CAAWH,KAAK,GAAG,CAAnB,CAAD,EAAwBE,IAAI,CAACE,IAAL,CAAUJ,KAAK,GAAG,CAAlB,CAAxB,CADJ,GAEI,CAACA,KAAK,GAAG,CAAT,EAAYA,KAAK,GAAG,CAApB,CAHN;;AAKA,cAAQjB,KAAK,CAACC,IAAd;AACE,aAAK,UAAL;AACE5B,UAAAA,gBAAgB,CAACE,WAAjB,IACE4C,IAAI,CAACE,IAAL,CACEJ,KAAK,IACF5C,gBAAgB,CAACE,WAAjB,IACEF,gBAAgB,CAACE,WAAjB,GACCF,gBAAgB,CAACC,cAFpB,CADE,CADP,KAKK4C,MAAM,CAAC,CAAD,CANb;AAOA7C,UAAAA,gBAAgB,CAACC,cAAjB,GACE,OAAO6C,IAAI,CAACI,GAAL,CAASrB,KAAT,IAAkB7B,gBAAgB,CAACE,WAA1C,CADF;AAEA;;AACF,aAAK,gBAAL;AACEF,UAAAA,gBAAgB,CAACE,WAAjB,IAAgC0C,KAAhC;AACA;;AACF,aAAK,aAAL;AACE5C,UAAAA,gBAAgB,CAACC,cAAjB,IAAmC2C,KAAnC;AACA;;AACF;AACE5C,UAAAA,gBAAgB,CAACG,QAAjB,GAA4B,EAA5B;AACAH,UAAAA,gBAAgB,CAACC,cAAjB,GAAkC,EAAlC;AACAD,UAAAA,gBAAgB,CAACE,WAAjB,GAA+B,CAA/B;AACA;AAtBJ;;AAwBAP,MAAAA,mBAAmB,CAACK,gBAApB,GAAuCA,gBAAvC;AACA,WAAKwC,QAAL,CAAc;AAAE7C,QAAAA;AAAF,OAAd;AACD,KAvM0B;;AAAA,SAyM3BwD,oBAzM2B,GAyMJ,CAAC;AAAEpB,MAAAA,aAAa,EAAEJ;AAAjB,KAAD,KAA8B;AACnD,YAAMhC,mBAAmB,qBAAQ,KAAKD,KAAL,CAAWC,mBAAnB,CAAzB;;AACA,YAAMyD,YAAY,GAAG7D,eAAe,EAApC;AACA,YAAM8D,QAAQ,GAAGD,YAAY,CAACE,IAAb,CACfC,QAAQ,IAAIA,QAAQ,CAACC,YAAT,KAA0B7B,KAAK,CAACE,KAD7B,CAAjB;AAGA,YAAM4B,YAAY,GAAG9B,KAAK,CAACC,IAAN,CAAWK,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAArB;AAEAtC,MAAAA,mBAAmB,CAACS,SAApB,CAA8BqD,YAA9B,IAA8CJ,QAA9C;AACA1D,MAAAA,mBAAmB,CAACU,SAApB,CAA8BoD,YAA9B,IAA8C;AAC5CC,QAAAA,sBAAsB,EAAEL,QAAQ,CAACK,sBADW;AAE5CC,QAAAA,oBAAoB,EAAEN,QAAQ,CAACM;AAFa,OAA9C;AAIAhE,MAAAA,mBAAmB,CAACW,iBAApB,CAAsCmD,YAAtC,IACEJ,QAAQ,CAACO,mBADX;AAGA,WAAKpB,QAAL,CAAc;AAAE7C,QAAAA;AAAF,OAAd;AACD,KA1N0B;;AAAA,SA4N3BkE,oBA5N2B,GA4NJ,CAAC;AAAE9B,MAAAA,aAAa,EAAEJ;AAAjB,KAAD,KAA8B;AACnD,YAAMhC,mBAAmB,qBAAQ,KAAKD,KAAL,CAAWC,mBAAnB,CAAzB;;AACA,YAAM8D,YAAY,GAAG9B,KAAK,CAACC,IAAN,CAAWK,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAArB;AACA,YAAM6B,YAAY,GAAGnC,KAAK,CAACC,IAAN,CAAWK,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAArB;;AAEA,UAAIN,KAAK,CAACE,KAAN,GAAc,CAAlB,EAAqB;AACnBF,QAAAA,KAAK,CAACE,KAAN,GAAc,CAAd;AACD;;AAEDlC,MAAAA,mBAAmB,CAACU,SAApB,CAA8BoD,YAA9B,EAA4CK,YAA5C,IACEnB,QAAQ,CAAChB,KAAK,CAACE,KAAN,CAAYM,OAAZ,CAAoB,OAApB,EAA6B,EAA7B,CAAD,CAAR,IAA8C,CADhD;AAEA,WAAKK,QAAL,CAAc;AAAE7C,QAAAA;AAAF,OAAd;AACD,KAxO0B;;AAAA,SA0O3BoE,wBA1O2B,GA0OA,CAAC;AAAEhC,MAAAA,aAAa,EAAEJ;AAAjB,KAAD,KAA8B;AACvD,YAAMhC,mBAAmB,qBAAQ,KAAKD,KAAL,CAAWC,mBAAnB,CAAzB;;AACA,YAAM8D,YAAY,GAAG9B,KAAK,CAACC,IAAN,CAAWK,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAArB;;AAEA,UAAIN,KAAK,CAACE,KAAN,GAAc,CAAlB,EAAqB;AACnBF,QAAAA,KAAK,CAACE,KAAN,GAAc,CAAd;AACD;;AAEDmC,MAAAA,OAAO,CAACC,GAAR,CAAYtB,QAAQ,CAAChB,KAAK,CAACE,KAAN,CAAYM,OAAZ,CAAoB,OAApB,EAA6B,EAA7B,CAAD,CAAR,IAA8C,CAA1D;AACAxC,MAAAA,mBAAmB,CAACW,iBAApB,CAAsCmD,YAAtC,IACEd,QAAQ,CAAChB,KAAK,CAACE,KAAN,CAAYM,OAAZ,CAAoB,OAApB,EAA6B,EAA7B,CAAD,CAAR,IAA8C,CADhD;AAGA,WAAKK,QAAL,CAAc;AAAE7C,QAAAA;AAAF,OAAd;AACD,KAvP0B;;AAAA,SAyP3BuE,2BAzP2B,GAyPG,CAAC;AAAEnC,MAAAA,aAAa,EAAEJ;AAAjB,KAAD,KAA8B;AAC1D,YAAMhC,mBAAmB,qBAAQ,KAAKD,KAAL,CAAWC,mBAAnB,CAAzB;;AACAA,MAAAA,mBAAmB,CAACC,eAApB,GAAsC+B,KAAK,CAACwC,OAA5C;AACA,WAAK3B,QAAL,CAAc;AAAE7C,QAAAA;AAAF,OAAd;AACD,KA7P0B;;AAAA,SA+P3ByE,kBA/P2B,GA+PN,CAACvC,KAAD,EAAQwC,OAAR,EAAiBnC,IAAjB,KAA0B;AAC7C,UAAIK,OAAO,qBAAQ,KAAK7C,KAAL,CAAW2E,OAAX,CAAR,CAAX;;AACA7E,MAAAA,CAAC,CAAC6C,GAAF,CAAME,OAAN,EAAeL,IAAf,EAAqBL,KAArB;;AACA,WAAKW,QAAL,CAAc;AAAE,SAAC6B,OAAD,GAAW9B;AAAb,OAAd;AACD,KAnQ0B;;AAAA,SAqQ3B+B,uBArQ2B,GAqQD,CAAC;AAAEvC,MAAAA,aAAa,EAAEJ;AAAjB,KAAD,KAA8B;AACtD,UAAIR,WAAW,qBAAQ,KAAKzB,KAAL,CAAWyB,WAAnB,CAAf;;AAEA,WAAK,IAAI8B,GAAT,IAAgB9B,WAAhB,EAA6B;AAC3BA,QAAAA,WAAW,CAAC8B,GAAD,CAAX,GAAmB,KAAnB;AACD;;AAED9B,MAAAA,WAAW,CAACQ,KAAK,CAACE,KAAP,CAAX,GAA2B,IAA3B;AACA,WAAKW,QAAL,CAAc;AAAErB,QAAAA;AAAF,OAAd;AACD,KA9Q0B;;AAAA,SAgR3BoD,QAhR2B,GAgRhB,MAAM;AACf,aAAO;AAAEzE,QAAAA,iBAAiB,EAAE;AAArB,OAAP;AACD,KAlR0B;;AAAA,SAoR3B0E,YApR2B,GAoRZC,CAAC,IAAI;AAClBA,MAAAA,CAAC,CAACC,cAAF;AAEA,YAAMnD,MAAM,GAAG,KAAKgD,QAAL,EAAf;AACA,WAAK/B,QAAL,CAAc;AAAEjB,QAAAA,MAAM,EAAE;AAAEC,UAAAA,YAAY,EAAED;AAAhB;AAAV,OAAd;AACA,UAAIA,MAAJ,EAAY,OALM,CAOlB;;AACA,YAAMoD,QAAQ,GAAG,IAAIrF,QAAJ,CAAa,KAAKI,KAAlB,CAAjB;AACAiF,MAAAA,QAAQ,CAACC,QAAT,GAAoBC,IAApB,CAAyBvD,OAAO,IAAI;AAClC,aAAKkB,QAAL,CAAc;AAAElB,UAAAA;AAAF,SAAd;AACD,OAFD;AAGD,KAhS0B;AAAA;;AA0C3BwD,EAAAA,iBAAiB,GAAG;AAClB;AADkB,yBAOdzF,WAAW,EAPG;AAAA,UAGhBM,mBAHgB,gBAGhBA,mBAHgB;AAAA,UAIhBY,eAJgB,gBAIhBA,eAJgB;AAAA,UAKhBO,eALgB,gBAKhBA,eALgB;AAAA,UAMhBK,WANgB,gBAMhBA,WANgB,EASlB;;;AACA,QAAI4D,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,QAAInF,SAAS,GAAG,IAAImF,IAAJ,CAASD,KAAT,CAAhB;AACAlF,IAAAA,SAAS,CAACoF,WAAV,CAAsBpF,SAAS,CAACqF,WAAV,KAA0B,CAAhD;AACArF,IAAAA,SAAS,CAACsF,UAAV,CAAqB,CAArB;AACAxF,IAAAA,mBAAmB,CAACE,SAApB,GAAgCA,SAAhC;AAEA,SAAK2C,QAAL,CAAc;AACZ7C,MAAAA,mBADY;AAEZY,MAAAA,eAFY;AAGZO,MAAAA,eAHY;AAIZK,MAAAA;AAJY,KAAd;AAMD;;AAkODiE,EAAAA,MAAM,GAAG;AAAA,wBAOH,KAAK1F,KAPF;AAAA,UAEL6B,MAFK,eAELA,MAFK;AAAA,UAGL5B,mBAHK,eAGLA,mBAHK;AAAA,UAILY,eAJK,eAILA,eAJK;AAAA,UAKLO,eALK,eAKLA,eALK;AAAA,UAMLK,WANK,eAMLA,WANK;AAAA,UAQCoC,QARD,GAQc,KAAK8B,KARnB,CAQC9B,QARD;AASP,UAAM+B,cAAc,GAAGpG,WAAW,CAACqG,KAAZ,CAAkBhC,QAAQ,CAACiC,MAA3B,CAAvB;AAEA,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,MAAM,EAAEjE,MADV;AAEE,MAAA,mBAAmB,EAAE5B,mBAFvB;AAGE,MAAA,eAAe,EAAEY,eAHnB;AAIE,MAAA,eAAe,EAAEO,eAJnB;AAKE,MAAA,WAAW,EAAEK,WALf;AAME,MAAA,YAAY,EAAE,KAAKsB,gBANrB;AAOE,MAAA,mBAAmB,EAAE,KAAKX,uBAP5B;AAQE,MAAA,cAAc,EAAE,KAAKsC,kBARvB;AASE,MAAA,yBAAyB,EAAE,KAAK1B,6BATlC;AAUE,MAAA,gBAAgB,EAAE,KAAKS,oBAVzB;AAWE,MAAA,gBAAgB,EAAE,KAAKU,oBAXzB;AAYE,MAAA,oBAAoB,EAAE,KAAKE,wBAZ7B;AAaE,MAAA,uBAAuB,EAAE,KAAKG,2BAbhC;AAcE,MAAA,mBAAmB,EAAE,KAAKI,uBAd5B;AAeE,MAAA,QAAQ,EAAE,KAAKE,YAfjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAsBE;AAAK,MAAA,KAAK,EAAE;AAAEiB,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AACE,MAAA,OAAO,EAAE,KAAK/F,KAAL,CAAW4B,OADtB;AAEE,MAAA,mBAAmB,EAAE3B,mBAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAtBF,CADF;AA+BD;;AA5U0B;;AA+U7B,eAAeF,IAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport queryString from \"query-string\";\nimport InputForm from \"../inputForm/inputForm\";\nimport ResultsTable from \"../resultsTable/resultsTable\";\nimport { getDefaults } from \"./../../services/fakeDefaultService\";\nimport Investor from \"../../models/investor\";\nimport { getActiveStates } from \"../../services/fakeStateService\";\nimport _ from \"lodash\";\n\nclass Home extends Component {\n  state = {\n    investorInformation: {\n      secondaryMarket: false,\n      startDate: \"\",\n      passiveIncomeGoal: \"\",\n      investmentCapital: \"\",\n      netRentBreakdown: {\n        paydownDebtPct: 0,\n        reinvestPct: 0,\n        spendPct: 0\n      },\n      locations: [],\n      lienCosts: [],\n      lienInterestRates: []\n    },\n    dealInformation: {\n      redemptionRatio: 0,\n      avgGrossRent: 0,\n      expenses: {\n        management: 0,\n        vacancy: 0,\n        repair: 0\n      }\n    },\n    renoInformation: {\n      avgRenoDuration: 0,\n      avgRenoCost: 0,\n      loanRate: 0,\n      loanTerm: 0\n    },\n    serviceType: {\n      setup: false,\n      recurring: false\n    },\n    periods: [],\n    errors: {\n      investorForm: {},\n      renoForm: {}\n    }\n  };\n\n  componentDidMount() {\n    // Get Defaults\n    const {\n      investorInformation,\n      dealInformation,\n      renoInformation,\n      serviceType\n    } = getDefaults();\n\n    // Set investment start date to next month by default.\n    let today = new Date();\n    let startDate = new Date(today);\n    startDate.setUTCMonth(startDate.getUTCMonth() + 1);\n    startDate.setUTCDate(1);\n    investorInformation.startDate = startDate;\n\n    this.setState({\n      investorInformation,\n      dealInformation,\n      renoInformation,\n      serviceType\n    });\n  }\n\n  validateProperty = input => {\n    if (input.name === \"investorInformation.passiveIncomeGoal\") {\n      if (input.value < 1) return \"Passive Income Goal is required.\";\n      // ...\n    }\n  };\n\n  handleNumberInputChange = ({ currentTarget: input }) => {\n    const parentObjName = input.name.split(\".\")[0];\n    const path = input.name.replace(parentObjName + \".\", \"\");\n\n    const errors = { ...this.state.errors };\n    const errorMessage = this.validateProperty(input);\n\n    if (errorMessage) _.set(errors, input.name, errorMessage);\n    else _.unset(errors, input.name);\n\n    const objCopy = { ...this.state[parentObjName] };\n    _.set(objCopy, path, input.value);\n    this.setState({ [parentObjName]: objCopy, errors: errors });\n  };\n\n  handleDateChange = startDate => {\n    const investorInformation = { ...this.state.investorInformation };\n    investorInformation.startDate = startDate;\n    this.setState({ investorInformation });\n  };\n\n  handleNetRentPreferenceChange = ({ currentTarget: input }) => {\n    const investorInformation = { ...this.state.investorInformation };\n    const netRentBreakdown = {\n      ...this.state.investorInformation.netRentBreakdown\n    };\n\n    let value = parseInt(input.value);\n\n    if (!value) {\n      netRentBreakdown[input.name] = \"\";\n      let delta =\n        0 - this.state.investorInformation.netRentBreakdown[input.name];\n      let deltas =\n        delta % 2 !== 0\n          ? [Math.floor(delta / 2), Math.ceil(delta / 2)]\n          : [delta / 2, delta / 2];\n\n      switch (input.name) {\n        case \"spendPct\":\n          netRentBreakdown.reinvestPct -=\n            Math.ceil(\n              delta *\n                (netRentBreakdown.reinvestPct /\n                  (netRentBreakdown.reinvestPct +\n                    netRentBreakdown.paydownDebtPct))\n            ) || deltas[0];\n          netRentBreakdown.paydownDebtPct =\n            100 - (0 + netRentBreakdown.reinvestPct);\n          break;\n        case \"paydownDebtPct\":\n          netRentBreakdown.reinvestPct -= delta;\n          break;\n        case \"reinvestPct\":\n          netRentBreakdown.paydownDebtPct -= delta;\n          break;\n        default:\n          netRentBreakdown.spendPct = 10;\n          netRentBreakdown.paydownDebtPct = 90;\n          netRentBreakdown.reinvestPct = 0;\n          break;\n      }\n      investorInformation.netRentBreakdown = netRentBreakdown;\n      this.setState({ investorInformation });\n      return;\n    }\n\n    // If user inputs 100, zero out other two (let them override)\n    if (value === 100) {\n      netRentBreakdown[input.name] = 100;\n      for (let key in netRentBreakdown) {\n        if (key !== input.name) {\n          netRentBreakdown[key] = 0;\n        }\n      }\n      investorInformation.netRentBreakdown = netRentBreakdown;\n      this.setState({ investorInformation });\n      return;\n    }\n\n    // Don't let user enter a value that would result in\n    // a total greather than 100%\n    if (input.name !== \"spendPct\" && value > 100 - netRentBreakdown.spendPct) {\n      value = 100 - netRentBreakdown.spendPct;\n    } else if (input.name === \"spendPct\" && value > 100) {\n      value = 100;\n    }\n\n    // Don't let a user enter a negative value\n    if (value < 0) value = 0;\n\n    netRentBreakdown[input.name] = value;\n\n    let delta =\n      value - this.state.investorInformation.netRentBreakdown[input.name];\n    let deltas =\n      delta % 2 !== 0\n        ? [Math.floor(delta / 2), Math.ceil(delta / 2)]\n        : [delta / 2, delta / 2];\n\n    switch (input.name) {\n      case \"spendPct\":\n        netRentBreakdown.reinvestPct -=\n          Math.ceil(\n            delta *\n              (netRentBreakdown.reinvestPct /\n                (netRentBreakdown.reinvestPct +\n                  netRentBreakdown.paydownDebtPct))\n          ) || deltas[0];\n        netRentBreakdown.paydownDebtPct =\n          100 - (Math.abs(value) + netRentBreakdown.reinvestPct);\n        break;\n      case \"paydownDebtPct\":\n        netRentBreakdown.reinvestPct -= delta;\n        break;\n      case \"reinvestPct\":\n        netRentBreakdown.paydownDebtPct -= delta;\n        break;\n      default:\n        netRentBreakdown.spendPct = 10;\n        netRentBreakdown.paydownDebtPct = 90;\n        netRentBreakdown.reinvestPct = 0;\n        break;\n    }\n    investorInformation.netRentBreakdown = netRentBreakdown;\n    this.setState({ investorInformation });\n  };\n\n  handleLocationChange = ({ currentTarget: input }) => {\n    const investorInformation = { ...this.state.investorInformation };\n    const activeStates = getActiveStates();\n    const newState = activeStates.find(\n      location => location.abbreviation === input.value\n    );\n    const changedIndex = input.name.split(\"-\")[1];\n\n    investorInformation.locations[changedIndex] = newState;\n    investorInformation.lienCosts[changedIndex] = {\n      avgLienCostLiveAuction: newState.avgLienCostLiveAuction,\n      avgLienCostSecondary: newState.avgLienCostSecondary\n    };\n    investorInformation.lienInterestRates[changedIndex] =\n      newState.avgLienInterestRate;\n\n    this.setState({ investorInformation });\n  };\n\n  handleLienCostChange = ({ currentTarget: input }) => {\n    const investorInformation = { ...this.state.investorInformation };\n    const changedIndex = input.name.split(\"-\")[1];\n    const changedField = input.name.split(\"-\")[0];\n\n    if (input.value < 0) {\n      input.value = 0;\n    }\n\n    investorInformation.lienCosts[changedIndex][changedField] =\n      parseInt(input.value.replace(/\\b0+/g, \"\")) || 0;\n    this.setState({ investorInformation });\n  };\n\n  handleLienInterestChange = ({ currentTarget: input }) => {\n    const investorInformation = { ...this.state.investorInformation };\n    const changedIndex = input.name.split(\"-\")[1];\n\n    if (input.value < 0) {\n      input.value = 0;\n    }\n\n    console.log(parseInt(input.value.replace(/\\b0+/g, \"\")) || 0);\n    investorInformation.lienInterestRates[changedIndex] =\n      parseInt(input.value.replace(/\\b0+/g, \"\")) || 0;\n\n    this.setState({ investorInformation });\n  };\n\n  handleSecondaryMarketChange = ({ currentTarget: input }) => {\n    const investorInformation = { ...this.state.investorInformation };\n    investorInformation.secondaryMarket = input.checked;\n    this.setState({ investorInformation });\n  };\n\n  handleSliderChange = (value, objName, path) => {\n    let objCopy = { ...this.state[objName] };\n    _.set(objCopy, path, value);\n    this.setState({ [objName]: objCopy });\n  };\n\n  handleServiceTypeChange = ({ currentTarget: input }) => {\n    let serviceType = { ...this.state.serviceType };\n\n    for (let key in serviceType) {\n      serviceType[key] = false;\n    }\n\n    serviceType[input.value] = true;\n    this.setState({ serviceType });\n  };\n\n  validate = () => {\n    return { passiveIncomeGoal: \"You are asking for too little.\" };\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const errors = this.validate();\n    this.setState({ errors: { investorForm: errors } });\n    if (errors) return;\n\n    //create investor & simulate process.\n    const investor = new Investor(this.state);\n    investor.simulate().then(periods => {\n      this.setState({ periods });\n    });\n  };\n\n  render() {\n    const {\n      errors,\n      investorInformation,\n      dealInformation,\n      renoInformation,\n      serviceType\n    } = this.state;\n    const { location } = this.props;\n    const optionalParams = queryString.parse(location.search);\n\n    return (\n      <React.Fragment>\n        <div>\n          <InputForm\n            errors={errors}\n            investorInformation={investorInformation}\n            dealInformation={dealInformation}\n            renoInformation={renoInformation}\n            serviceType={serviceType}\n            onDateChange={this.handleDateChange}\n            onNumberInputChange={this.handleNumberInputChange}\n            onSliderChange={this.handleSliderChange}\n            onNetRentPreferenceChange={this.handleNetRentPreferenceChange}\n            onLocationChange={this.handleLocationChange}\n            onLienCostChange={this.handleLienCostChange}\n            onLienInterestChange={this.handleLienInterestChange}\n            onSecondaryMarketChange={this.handleSecondaryMarketChange}\n            onServiceTypeChange={this.handleServiceTypeChange}\n            onSubmit={this.handleSubmit}\n          />\n\n          {/* <p>{JSON.stringify(optionalParams)}</p> */}\n        </div>\n        <div style={{ marginTop: \"50px\" }}>\n          <ResultsTable\n            periods={this.state.periods}\n            investorInformation={investorInformation}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Home;\n\n// Outputs\n// Should be a schedule that can be viewed as years (aggregated values) or months\n// Should last 24 Months after Investment Goal is hit\n// PHase 2 Consideration --- people can pick fields to add to output.\n\n// Period\n// Date\n// Invetment Capital\n// Liens Purchased\n// Housed Acquired\n// Outstanding Debt\n// Passive Rental Income\n\n// *****************************\n// General Comments\n// *****************************\n// (1) Limiting Location Options: Instead of letting users pick any state\n// we will reduce this to a managed system where\n// iWealthRE's subject matter expertise is.\n\n// (2) Buying Location Preference: We should let users pick\n// their top three states.\n\n// (3) Research Time: If I get money in July, I can't spend it at a\n// live auction until August. This is because I need a minimum of\n// 1 month to do research on properties. (make this a variable)\n\n// (4) Lien cost on Secondary Market: Typical lien cost on the\n// secondary market is 1 year tax plus some premium. This is the\n// average redemptive value. Essentially, secondary buyers have to pay extra\n// for not having to wait for the lien to mature. An important note here,\n// when a person buys a lien on the seondary market timport Investor from './../../models/investor';\n\n// will not be on the redemptive value, rather it will be on the original\n// lien cost (which will be less than the redemptive cost).\n\n// (5) Tool should assume live auction.\n// -In which case we will show only the live auction lien vlaue\n// -next to state option drop down\n// -\n// -If user toggles secondary\n// -then we will only show them the secondary lien costs\n"]},"metadata":{},"sourceType":"module"}