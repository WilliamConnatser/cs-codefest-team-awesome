{"ast":null,"code":"import _objectSpread from \"/Users/reappdev/repos/iwealth-tax-lien-calculator/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/reappdev/repos/iwealth-tax-lien-calculator/src/components/inputForm/inputForm.jsx\";\nimport React, { Component } from \"react\";\nimport CardHeaderTabs from \"../../common/cardHeaderTabs\";\nimport InvestorFormPartial from \"../investorFormPartial/investorFormPartial\";\nimport RenoFormPartial from \"../renoFormPartial/renoFormPartial\";\nimport DealFormPartial from \"./../dealFormPartial/dealFormPartial\";\nimport { getDefaults } from \"./../../services/fakeDefaultService\";\n\nclass InputForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeTab: {},\n      investorInformation: {\n        secondaryMarket: false,\n        startDate: \"\",\n        passiveIncomeGoal: \"\",\n        investmentCapital: \"\",\n        netRentBreakdown: {\n          paydownDebtPct: \"\",\n          reinvestPct: \"\",\n          spendPct: \"\"\n        },\n        locations: {\n          location1: {},\n          location2: {},\n          location3: {}\n        },\n        lienCosts: {\n          location1: {\n            avgLienCostLiveAuction: 100,\n            avgLienCostSecondary: 150\n          }\n        }\n      },\n      dealInformation: {\n        redemptionRatio: 0,\n        isFullyManaged: false,\n        avgGrossRent: 0,\n        expenses: {\n          management: 0,\n          vacancy: 0,\n          repair: 0\n        }\n      }\n    };\n    this.tabs = [{\n      id: \"inventoryTab\",\n      title: \"Investor\"\n    }, {\n      id: \"dealTab\",\n      title: \"Deal\"\n    }, {\n      id: \"renoTab\",\n      title: \"Reno\"\n    }, {\n      id: \"submit\",\n      title: \"Calculate\"\n    }];\n\n    this.handleChange = data => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      if (!data.currentTarget) {\n        //The start date is being updated...\n        investorInformation.startDate = data;\n      } else {\n        // A normal input is being updated...\n        investorInformation[data.currentTarget.name] = data.currentTarget.value;\n      }\n\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleNetRentPreferenceChange = ({\n      currentTarget: input\n    }) => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      const netRentBreakdown = _objectSpread({}, this.state.investorInformation.netRentBreakdown); // If user inputs 100, zero out other two (let them override)\n\n\n      if (input.value === 100) {\n        netRentBreakdown[input.name] = 100;\n\n        for (let key in netRentBreakdown) {\n          if (key !== input.name) {\n            netRentBreakdown[key] = 0;\n          }\n        }\n\n        investorInformation.netRentBreakdown = netRentBreakdown;\n        this.setState({\n          investorInformation\n        });\n        return;\n      } // Don't let user enter a value that would result in\n      // a total greather than 100%\n\n\n      if (input.name !== \"spendPct\" && input.value > 100 - netRentBreakdown.spendPct) {\n        input.value = 100 - netRentBreakdown.spendPct;\n      } else if (input.name === \"spendPct\" && input.value > 100) {\n        input.value = 100;\n      } // Don't let a user enter a negative value\n\n\n      if (input.value < 0) input.value = 0;\n      netRentBreakdown[input.name] = input.value;\n      let delta = input.value - this.state.investorInformation.netRentBreakdown[input.name];\n      let deltas = delta % 2 !== 0 ? [Math.floor(delta / 2), Math.ceil(delta / 2)] : [delta / 2, delta / 2];\n\n      switch (input.name) {\n        case \"spendPct\":\n          netRentBreakdown.reinvestPct -= Math.ceil(delta * (netRentBreakdown.reinvestPct / (netRentBreakdown.reinvestPct + netRentBreakdown.paydownDebtPct))) || deltas[0];\n          netRentBreakdown.paydownDebtPct = 100 - (Math.abs(input.value) + netRentBreakdown.reinvestPct);\n          break;\n\n        case \"paydownDebtPct\":\n          netRentBreakdown.reinvestPct -= delta;\n          break;\n\n        case \"reinvestPct\":\n          netRentBreakdown.paydownDebtPct -= delta;\n          break;\n\n        default:\n          netRentBreakdown.spendPct = 10;\n          netRentBreakdown.paydownDebtPct = 90;\n          netRentBreakdown.reinvestPct = 0;\n          break;\n      }\n\n      investorInformation.netRentBreakdown = netRentBreakdown;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleLocationChange = ({\n      currentTarget: input\n    }) => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      const locations = investorInformation.locations,\n            lienCosts = investorInformation.lienCosts;\n      const selectedLocation = JSON.parse(input.value);\n      locations[input.name] = selectedLocation;\n      lienCosts[input.name].avgLienCostLiveAuction = selectedLocation.avgLienCostLiveAuction;\n      lienCosts[input.name].avgLienCostSecondary = selectedLocation.avgLienCostSecondary;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleLienCostChange = ({\n      currentTarget: input\n    }) => {\n      const pathParts = input.name.split(\".\");\n\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      investorInformation.lienCosts[pathParts[0]][pathParts[1]] = input.value;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleSecondaryMarketChange = ({\n      currentTarget: input\n    }) => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      investorInformation.secondaryMarket = input.checked;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleExpenseChange = (value, expense) => {\n      let dealInformation = _objectSpread({}, this.state.dealInformation);\n\n      dealInformation.expenses[expense] = value;\n      this.setState({\n        dealInformation\n      });\n    };\n\n    this.handleGrossRentChange = value => {\n      let dealInformation = _objectSpread({}, this.state.dealInformation);\n\n      dealInformation.avgGrossRent = value;\n      this.setState({\n        dealInformation\n      });\n    };\n\n    this.handleRedemptionRatioChange = value => {\n      let dealInformation = _objectSpread({}, this.state.dealInformation);\n\n      dealInformation.redemptionRatio = value;\n      this.setState({\n        dealInformation\n      });\n    };\n\n    this.handleFullyManagedChange = ({\n      currentTarget: input\n    }) => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      investorInformation.secondaryMarket = input.checked;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleTabClick = tab => {\n      const activeTabIndex = this.tabs.indexOf(tab);\n      this.setState({\n        activeTab: this.tabs[activeTabIndex]\n      });\n    };\n  }\n\n  componentDidMount() {\n    // Get Defaults\n    const _getDefaults = getDefaults(),\n          investorInformation = _getDefaults.investorInformation,\n          dealInformation = _getDefaults.dealInformation; // Set investment start date to next month by default.\n\n\n    let today = new Date();\n    let startDate = new Date(today);\n    startDate.setUTCMonth(startDate.getUTCMonth() + 1);\n    startDate.setUTCDate(1);\n    investorInformation.startDate = startDate;\n    this.setState({\n      activeTab: this.tabs[0],\n      investorInformation,\n      dealInformation\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          activeTab = _this$state.activeTab,\n          investorInformation = _this$state.investorInformation,\n          dealInformation = _this$state.dealInformation;\n    return React.createElement(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-header bg-default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(CardHeaderTabs, {\n      tabs: this.tabs,\n      activeTab: activeTab,\n      onTabClick: this.handleTabClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, activeTab.id === \"inventoryTab\" && React.createElement(InvestorFormPartial, {\n      investorInformation: investorInformation,\n      onChange: this.handleChange,\n      onNetRentPreferenceChange: this.handleNetRentPreferenceChange,\n      onLocationChange: this.handleLocationChange,\n      onLienCostChange: this.handleLienCostChange,\n      onSecondaryMarketChange: this.handleSecondaryMarketChange,\n      states: this.state.states,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), activeTab.id === \"dealTab\" && React.createElement(DealFormPartial, {\n      dealInformation: dealInformation,\n      onRedemptionRatioChange: this.handleRedemptionRatioChange,\n      onExpenseChange: this.handleExpenseChange,\n      onGrossRentChange: this.handleGrossRentChange,\n      onFullyManagedChange: this.handleFullyManagedChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }), activeTab.id === \"renoTab\" && React.createElement(RenoFormPartial, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default InputForm;","map":{"version":3,"sources":["/Users/reappdev/repos/iwealth-tax-lien-calculator/src/components/inputForm/inputForm.jsx"],"names":["React","Component","CardHeaderTabs","InvestorFormPartial","RenoFormPartial","DealFormPartial","getDefaults","InputForm","state","activeTab","investorInformation","secondaryMarket","startDate","passiveIncomeGoal","investmentCapital","netRentBreakdown","paydownDebtPct","reinvestPct","spendPct","locations","location1","location2","location3","lienCosts","avgLienCostLiveAuction","avgLienCostSecondary","dealInformation","redemptionRatio","isFullyManaged","avgGrossRent","expenses","management","vacancy","repair","tabs","id","title","handleChange","data","currentTarget","name","value","setState","handleNetRentPreferenceChange","input","key","delta","deltas","Math","floor","ceil","abs","handleLocationChange","selectedLocation","JSON","parse","handleLienCostChange","pathParts","split","handleSecondaryMarketChange","checked","handleExpenseChange","expense","handleGrossRentChange","handleRedemptionRatioChange","handleFullyManagedChange","handleTabClick","tab","activeTabIndex","indexOf","componentDidMount","today","Date","setUTCMonth","getUTCMonth","setUTCDate","render","states"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CardHeaderTabs from \"../../common/cardHeaderTabs\";\nimport InvestorFormPartial from \"../investorFormPartial/investorFormPartial\";\nimport RenoFormPartial from \"../renoFormPartial/renoFormPartial\";\nimport DealFormPartial from \"./../dealFormPartial/dealFormPartial\";\nimport { getDefaults } from \"./../../services/fakeDefaultService\";\n\nclass InputForm extends Component {\n  state = {\n    activeTab: {},\n    investorInformation: {\n      secondaryMarket: false,\n      startDate: \"\",\n      passiveIncomeGoal: \"\",\n      investmentCapital: \"\",\n      netRentBreakdown: {\n        paydownDebtPct: \"\",\n        reinvestPct: \"\",\n        spendPct: \"\"\n      },\n      locations: {\n        location1: {},\n        location2: {},\n        location3: {}\n      },\n      lienCosts: {\n        location1: {\n          avgLienCostLiveAuction: 100,\n          avgLienCostSecondary: 150\n        }\n      }\n    },\n    dealInformation: {\n      redemptionRatio: 0,\n      isFullyManaged: false,\n      avgGrossRent: 0,\n      expenses: {\n        management: 0,\n        vacancy: 0,\n        repair: 0\n      }\n    }\n  };\n\n  tabs = [\n    { id: \"inventoryTab\", title: \"Investor\" },\n    { id: \"dealTab\", title: \"Deal\" },\n    { id: \"renoTab\", title: \"Reno\" },\n    { id: \"submit\", title: \"Calculate\" }\n  ];\n\n  componentDidMount() {\n    // Get Defaults\n    const { investorInformation, dealInformation } = getDefaults();\n\n    // Set investment start date to next month by default.\n    let today = new Date();\n    let startDate = new Date(today);\n    startDate.setUTCMonth(startDate.getUTCMonth() + 1);\n    startDate.setUTCDate(1);\n    investorInformation.startDate = startDate;\n\n    this.setState({\n      activeTab: this.tabs[0],\n      investorInformation,\n      dealInformation\n    });\n  }\n\n  handleChange = data => {\n    const investorInformation = { ...this.state.investorInformation };\n\n    if (!data.currentTarget) {\n      //The start date is being updated...\n      investorInformation.startDate = data;\n    } else {\n      // A normal input is being updated...\n      investorInformation[data.currentTarget.name] = data.currentTarget.value;\n    }\n    this.setState({ investorInformation });\n  };\n\n  handleNetRentPreferenceChange = ({ currentTarget: input }) => {\n    const investorInformation = { ...this.state.investorInformation };\n    const netRentBreakdown = {\n      ...this.state.investorInformation.netRentBreakdown\n    };\n\n    // If user inputs 100, zero out other two (let them override)\n    if (input.value === 100) {\n      netRentBreakdown[input.name] = 100;\n      for (let key in netRentBreakdown) {\n        if (key !== input.name) {\n          netRentBreakdown[key] = 0;\n        }\n      }\n      investorInformation.netRentBreakdown = netRentBreakdown;\n      this.setState({ investorInformation });\n      return;\n    }\n\n    // Don't let user enter a value that would result in\n    // a total greather than 100%\n    if (\n      input.name !== \"spendPct\" &&\n      input.value > 100 - netRentBreakdown.spendPct\n    ) {\n      input.value = 100 - netRentBreakdown.spendPct;\n    } else if (input.name === \"spendPct\" && input.value > 100) {\n      input.value = 100;\n    }\n\n    // Don't let a user enter a negative value\n    if (input.value < 0) input.value = 0;\n\n    netRentBreakdown[input.name] = input.value;\n\n    let delta =\n      input.value - this.state.investorInformation.netRentBreakdown[input.name];\n    let deltas =\n      delta % 2 !== 0\n        ? [Math.floor(delta / 2), Math.ceil(delta / 2)]\n        : [delta / 2, delta / 2];\n\n    switch (input.name) {\n      case \"spendPct\":\n        netRentBreakdown.reinvestPct -=\n          Math.ceil(\n            delta *\n            (netRentBreakdown.reinvestPct /\n              (netRentBreakdown.reinvestPct +\n                netRentBreakdown.paydownDebtPct))\n          ) || deltas[0];\n        netRentBreakdown.paydownDebtPct =\n          100 - (Math.abs(input.value) + netRentBreakdown.reinvestPct);\n        break;\n      case \"paydownDebtPct\":\n        netRentBreakdown.reinvestPct -= delta;\n        break;\n      case \"reinvestPct\":\n        netRentBreakdown.paydownDebtPct -= delta;\n        break;\n      default:\n        netRentBreakdown.spendPct = 10;\n        netRentBreakdown.paydownDebtPct = 90;\n        netRentBreakdown.reinvestPct = 0;\n        break;\n    }\n    investorInformation.netRentBreakdown = netRentBreakdown;\n    this.setState({ investorInformation });\n  };\n\n  handleLocationChange = ({ currentTarget: input }) => {\n    const investorInformation = { ...this.state.investorInformation };\n    const { locations, lienCosts } = investorInformation;\n    const selectedLocation = JSON.parse(input.value);\n\n    locations[input.name] = selectedLocation;\n    lienCosts[input.name].avgLienCostLiveAuction =\n      selectedLocation.avgLienCostLiveAuction;\n    lienCosts[input.name].avgLienCostSecondary =\n      selectedLocation.avgLienCostSecondary;\n\n    this.setState({ investorInformation });\n  };\n\n  handleLienCostChange = ({ currentTarget: input }) => {\n    const pathParts = input.name.split(\".\");\n    const investorInformation = { ...this.state.investorInformation };\n    investorInformation.lienCosts[pathParts[0]][pathParts[1]] = input.value;\n    this.setState({ investorInformation });\n  };\n\n  handleSecondaryMarketChange = ({ currentTarget: input }) => {\n    const investorInformation = { ...this.state.investorInformation };\n    investorInformation.secondaryMarket = input.checked;\n    this.setState({ investorInformation });\n  };\n\n  handleExpenseChange = (value, expense) => {\n    let dealInformation = { ...this.state.dealInformation };\n    dealInformation.expenses[expense] = value;\n    this.setState({ dealInformation });\n  };\n\n  handleGrossRentChange = value => {\n    let dealInformation = { ...this.state.dealInformation };\n    dealInformation.avgGrossRent = value;\n    this.setState({ dealInformation });\n  };\n\n  handleRedemptionRatioChange = value => {\n    let dealInformation = { ...this.state.dealInformation };\n    dealInformation.redemptionRatio = value;\n    this.setState({ dealInformation });\n  };\n\n  handleFullyManagedChange = ({ currentTarget: input }) => {\n    const investorInformation = { ...this.state.investorInformation };\n    investorInformation.secondaryMarket = input.checked;\n    this.setState({ investorInformation });\n  };\n\n  handleTabClick = tab => {\n    const activeTabIndex = this.tabs.indexOf(tab);\n    this.setState({ activeTab: this.tabs[activeTabIndex] });\n  };\n\n  render() {\n    const { activeTab, investorInformation, dealInformation } = this.state;\n    return (\n      <div className=\"card\">\n        <div className=\"card-header bg-default\">\n          <CardHeaderTabs\n            tabs={this.tabs}\n            activeTab={activeTab}\n            onTabClick={this.handleTabClick}\n          />\n        </div>\n        <div className=\"card-body\">\n          <form>\n            {/* Tab 1 */}\n            {activeTab.id === \"inventoryTab\" && (\n              <InvestorFormPartial\n                investorInformation={investorInformation}\n                onChange={this.handleChange}\n                onNetRentPreferenceChange={this.handleNetRentPreferenceChange}\n                onLocationChange={this.handleLocationChange}\n                onLienCostChange={this.handleLienCostChange}\n                onSecondaryMarketChange={this.handleSecondaryMarketChange}\n                states={this.state.states}\n              />\n            )}\n\n            {/* Tab 2 */}\n            {activeTab.id === \"dealTab\" && (\n              <DealFormPartial\n                dealInformation={dealInformation}\n                onRedemptionRatioChange={this.handleRedemptionRatioChange}\n                onExpenseChange={this.handleExpenseChange}\n                onGrossRentChange={this.handleGrossRentChange}\n                onFullyManagedChange={this.handleFullyManagedChange}\n              />\n            )}\n\n            {/* Tab 3 */}\n            {activeTab.id === \"renoTab\" && <RenoFormPartial />}\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InputForm;\n"]},"metadata":{},"sourceType":"module"}