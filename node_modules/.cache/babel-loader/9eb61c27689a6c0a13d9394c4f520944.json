{"ast":null,"code":"import _objectSpread from \"/Users/reappdev/repos/iwealth-tax-lien-calculator/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/reappdev/repos/iwealth-tax-lien-calculator/src/components/home/home.jsx\";\nimport React, { Component } from \"react\";\nimport queryString from \"query-string\";\nimport InputForm from \"../inputForm/inputForm\";\nimport ResultsTable from \"../resultsTable/resultsTable\";\nimport { getDefaults } from \"./../../services/fakeDefaultService\";\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      investorInformation: {\n        secondaryMarket: false,\n        startDate: \"\",\n        passiveIncomeGoal: \"\",\n        investmentCapital: \"\",\n        netRentBreakdown: {\n          paydownDebtPct: \"\",\n          reinvestPct: \"\",\n          spendPct: \"\"\n        },\n        locations: {\n          location1: {},\n          location2: {},\n          location3: {}\n        },\n        lienCosts: {\n          location1: {\n            avgLienCostLiveAuction: 100,\n            avgLienCostSecondary: 150\n          }\n        }\n      },\n      dealInformation: {\n        redemptionRatio: 0,\n        avgGrossRent: 0,\n        expenses: {\n          management: 0,\n          vacancy: 0,\n          repair: 0\n        }\n      },\n      serviceType: {\n        setup: true,\n        recurring: false,\n        fullyManaged: false\n      }\n    };\n\n    this.handleChange = data => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      if (!data.currentTarget) {\n        //The start date is being updated...\n        investorInformation.startDate = data;\n      } else {\n        // A normal input is being updated...\n        investorInformation[data.currentTarget.name] = data.currentTarget.value;\n      }\n\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleNetRentPreferenceChange = ({\n      currentTarget: input\n    }) => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      const netRentBreakdown = _objectSpread({}, this.state.investorInformation.netRentBreakdown); // If user inputs 100, zero out other two (let them override)\n\n\n      if (input.value === 100) {\n        netRentBreakdown[input.name] = 100;\n\n        for (let key in netRentBreakdown) {\n          if (key !== input.name) {\n            netRentBreakdown[key] = 0;\n          }\n        }\n\n        investorInformation.netRentBreakdown = netRentBreakdown;\n        this.setState({\n          investorInformation\n        });\n        return;\n      } // Don't let user enter a value that would result in\n      // a total greather than 100%\n\n\n      if (input.name !== \"spendPct\" && input.value > 100 - netRentBreakdown.spendPct) {\n        input.value = 100 - netRentBreakdown.spendPct;\n      } else if (input.name === \"spendPct\" && input.value > 100) {\n        input.value = 100;\n      } // Don't let a user enter a negative value\n\n\n      if (input.value < 0) input.value = 0;\n      netRentBreakdown[input.name] = input.value;\n      let delta = input.value - this.state.investorInformation.netRentBreakdown[input.name];\n      let deltas = delta % 2 !== 0 ? [Math.floor(delta / 2), Math.ceil(delta / 2)] : [delta / 2, delta / 2];\n\n      switch (input.name) {\n        case \"spendPct\":\n          netRentBreakdown.reinvestPct -= Math.ceil(delta * (netRentBreakdown.reinvestPct / (netRentBreakdown.reinvestPct + netRentBreakdown.paydownDebtPct))) || deltas[0];\n          netRentBreakdown.paydownDebtPct = 100 - (Math.abs(input.value) + netRentBreakdown.reinvestPct);\n          break;\n\n        case \"paydownDebtPct\":\n          netRentBreakdown.reinvestPct -= delta;\n          break;\n\n        case \"reinvestPct\":\n          netRentBreakdown.paydownDebtPct -= delta;\n          break;\n\n        default:\n          netRentBreakdown.spendPct = 10;\n          netRentBreakdown.paydownDebtPct = 90;\n          netRentBreakdown.reinvestPct = 0;\n          break;\n      }\n\n      investorInformation.netRentBreakdown = netRentBreakdown;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleLocationChange = ({\n      currentTarget: input\n    }) => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      const locations = investorInformation.locations,\n            lienCosts = investorInformation.lienCosts;\n      const selectedLocation = JSON.parse(input.value);\n      locations[input.name] = selectedLocation;\n      lienCosts[input.name].avgLienCostLiveAuction = selectedLocation.avgLienCostLiveAuction;\n      lienCosts[input.name].avgLienCostSecondary = selectedLocation.avgLienCostSecondary;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleLienCostChange = ({\n      currentTarget: input\n    }) => {\n      const pathParts = input.name.split(\".\");\n\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      investorInformation.lienCosts[pathParts[0]][pathParts[1]] = input.value;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleSecondaryMarketChange = ({\n      currentTarget: input\n    }) => {\n      const investorInformation = _objectSpread({}, this.state.investorInformation);\n\n      investorInformation.secondaryMarket = input.checked;\n      this.setState({\n        investorInformation\n      });\n    };\n\n    this.handleExpenseChange = (value, expense) => {\n      let dealInformation = _objectSpread({}, this.state.dealInformation);\n\n      dealInformation.expenses[expense] = value;\n      this.setState({\n        dealInformation\n      });\n    };\n\n    this.handleGrossRentChange = value => {\n      let dealInformation = _objectSpread({}, this.state.dealInformation);\n\n      dealInformation.avgGrossRent = value;\n      this.setState({\n        dealInformation\n      });\n    };\n\n    this.handleRedemptionRatioChange = value => {\n      let dealInformation = _objectSpread({}, this.state.dealInformation);\n\n      dealInformation.redemptionRatio = value;\n      this.setState({\n        dealInformation\n      });\n    };\n\n    this.handleServiceTypeChange = ({\n      currentTarget: input\n    }) => {\n      let serviceType = _objectSpread({}, this.state.serviceType);\n\n      for (let key in serviceType) {\n        serviceType[key] = false;\n      }\n\n      serviceType[input.value] = true;\n      this.setState({\n        serviceType\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      console.log(this.state);\n    };\n  }\n\n  componentDidMount() {\n    // Get Defaults\n    const _getDefaults = getDefaults(),\n          investorInformation = _getDefaults.investorInformation,\n          dealInformation = _getDefaults.dealInformation; // Set investment start date to next month by default.\n\n\n    let today = new Date();\n    let startDate = new Date(today);\n    startDate.setUTCMonth(startDate.getUTCMonth() + 1);\n    startDate.setUTCDate(1);\n    investorInformation.startDate = startDate;\n    this.setState({\n      investorInformation,\n      dealInformation\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          investorInformation = _this$state.investorInformation,\n          dealInformation = _this$state.dealInformation,\n          serviceType = _this$state.serviceType;\n    const location = this.props.location;\n    const optionalParams = queryString.parse(location.search);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(InputForm, {\n      investorInformation: investorInformation,\n      dealInformation: dealInformation,\n      serviceType: serviceType,\n      onChange: this.handleChange,\n      onNetRentPreferenceChange: this.handleNetRentPreferenceChange,\n      onLocationChange: this.handleLocationChange,\n      onLienCostChange: this.handleLienCostChange,\n      onSecondaryMarketChange: this.handleSecondaryMarketChange,\n      onRedemptionRatioChange: this.handleRedemptionRatioChange,\n      onExpenseChange: this.handleExpenseChange,\n      onGrossRentChange: this.handleGrossRentChange,\n      onServiceTypeChange: this.handleServiceTypeChange,\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, JSON.stringify(optionalParams)), React.createElement(ResultsTable, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Home; // Outputs\n// Should be a schedule that can be viewed as years (aggregated values) or months\n// Should last 24 Months after Investment Goal is hit\n// PHase 2 Consideration --- people can pick fields to add to output.\n// Period\n// Date\n// Invetment Capital\n// Liens Purchased\n// Housed Acquired\n// Outstanding Debt\n// Passive Rental Income\n// *****************************\n// General Comments\n// *****************************\n// (1) Limiting Location Options: Instead of letting users pick any state\n// we will reduce this to a managed system where\n// iWealthRE's subject matter expertise is.\n// (2) Buying Location Preference: We should let users pick\n// their top three states.\n// (3) Research Time: If I get money in July, I can't spend it at a\n// live auction until August. This is because I need a minimum of\n// 1 month to do research on properties. (make this a variable)\n// (4) Lien cost on Secondary Market: Typical lien cost on the\n// secondary market is 1 year tax plus some premium. This is the\n// average redemptive value. Essentially, secondary buyers have to pay extra\n// for not having to wait for the lien to mature. An important note here,\n// when a person buys a lien on the seondary market their interest income\n// will not be on the redemptive value, rather it will be on the original\n// lien cost (which will be less than the redemptive cost).\n// (5) Tool should assume live auction.\n// -In which case we will show only the live auction lien vlaue\n// -next to state option drop down\n// -\n// -If user toggles secondary\n// -then we will only show them the secondary lien costs","map":{"version":3,"sources":["/Users/reappdev/repos/iwealth-tax-lien-calculator/src/components/home/home.jsx"],"names":["React","Component","queryString","InputForm","ResultsTable","getDefaults","Home","state","investorInformation","secondaryMarket","startDate","passiveIncomeGoal","investmentCapital","netRentBreakdown","paydownDebtPct","reinvestPct","spendPct","locations","location1","location2","location3","lienCosts","avgLienCostLiveAuction","avgLienCostSecondary","dealInformation","redemptionRatio","avgGrossRent","expenses","management","vacancy","repair","serviceType","setup","recurring","fullyManaged","handleChange","data","currentTarget","name","value","setState","handleNetRentPreferenceChange","input","key","delta","deltas","Math","floor","ceil","abs","handleLocationChange","selectedLocation","JSON","parse","handleLienCostChange","pathParts","split","handleSecondaryMarketChange","checked","handleExpenseChange","expense","handleGrossRentChange","handleRedemptionRatioChange","handleServiceTypeChange","handleSubmit","e","preventDefault","console","log","componentDidMount","today","Date","setUTCMonth","getUTCMonth","setUTCDate","render","location","props","optionalParams","search","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport queryString from \"query-string\";\nimport InputForm from \"../inputForm/inputForm\";\nimport ResultsTable from \"../resultsTable/resultsTable\";\nimport { getDefaults } from \"./../../services/fakeDefaultService\";\n\nclass Home extends Component {\n  state = {\n    investorInformation: {\n      secondaryMarket: false,\n      startDate: \"\",\n      passiveIncomeGoal: \"\",\n      investmentCapital: \"\",\n      netRentBreakdown: {\n        paydownDebtPct: \"\",\n        reinvestPct: \"\",\n        spendPct: \"\"\n      },\n      locations: {\n        location1: {},\n        location2: {},\n        location3: {}\n      },\n      lienCosts: {\n        location1: {\n          avgLienCostLiveAuction: 100,\n          avgLienCostSecondary: 150\n        }\n      }\n    },\n    dealInformation: {\n      redemptionRatio: 0,\n      avgGrossRent: 0,\n      expenses: {\n        management: 0,\n        vacancy: 0,\n        repair: 0\n      }\n    },\n    serviceType: {\n      setup: true,\n      recurring: false,\n      fullyManaged: false\n    }\n  };\n\n  componentDidMount() {\n    // Get Defaults\n    const { investorInformation, dealInformation } = getDefaults();\n\n    // Set investment start date to next month by default.\n    let today = new Date();\n    let startDate = new Date(today);\n    startDate.setUTCMonth(startDate.getUTCMonth() + 1);\n    startDate.setUTCDate(1);\n    investorInformation.startDate = startDate;\n\n    this.setState({\n      investorInformation,\n      dealInformation\n    });\n  }\n\n  handleChange = data => {\n    const investorInformation = { ...this.state.investorInformation };\n\n    if (!data.currentTarget) {\n      //The start date is being updated...\n      investorInformation.startDate = data;\n    } else {\n      // A normal input is being updated...\n      investorInformation[data.currentTarget.name] = data.currentTarget.value;\n    }\n    this.setState({ investorInformation });\n  };\n\n  handleNetRentPreferenceChange = ({ currentTarget: input }) => {\n    const investorInformation = { ...this.state.investorInformation };\n    const netRentBreakdown = {\n      ...this.state.investorInformation.netRentBreakdown\n    };\n\n    // If user inputs 100, zero out other two (let them override)\n    if (input.value === 100) {\n      netRentBreakdown[input.name] = 100;\n      for (let key in netRentBreakdown) {\n        if (key !== input.name) {\n          netRentBreakdown[key] = 0;\n        }\n      }\n      investorInformation.netRentBreakdown = netRentBreakdown;\n      this.setState({ investorInformation });\n      return;\n    }\n\n    // Don't let user enter a value that would result in\n    // a total greather than 100%\n    if (\n      input.name !== \"spendPct\" &&\n      input.value > 100 - netRentBreakdown.spendPct\n    ) {\n      input.value = 100 - netRentBreakdown.spendPct;\n    } else if (input.name === \"spendPct\" && input.value > 100) {\n      input.value = 100;\n    }\n\n    // Don't let a user enter a negative value\n    if (input.value < 0) input.value = 0;\n\n    netRentBreakdown[input.name] = input.value;\n\n    let delta =\n      input.value - this.state.investorInformation.netRentBreakdown[input.name];\n    let deltas =\n      delta % 2 !== 0\n        ? [Math.floor(delta / 2), Math.ceil(delta / 2)]\n        : [delta / 2, delta / 2];\n\n    switch (input.name) {\n      case \"spendPct\":\n        netRentBreakdown.reinvestPct -=\n          Math.ceil(\n            delta *\n              (netRentBreakdown.reinvestPct /\n                (netRentBreakdown.reinvestPct +\n                  netRentBreakdown.paydownDebtPct))\n          ) || deltas[0];\n        netRentBreakdown.paydownDebtPct =\n          100 - (Math.abs(input.value) + netRentBreakdown.reinvestPct);\n        break;\n      case \"paydownDebtPct\":\n        netRentBreakdown.reinvestPct -= delta;\n        break;\n      case \"reinvestPct\":\n        netRentBreakdown.paydownDebtPct -= delta;\n        break;\n      default:\n        netRentBreakdown.spendPct = 10;\n        netRentBreakdown.paydownDebtPct = 90;\n        netRentBreakdown.reinvestPct = 0;\n        break;\n    }\n    investorInformation.netRentBreakdown = netRentBreakdown;\n    this.setState({ investorInformation });\n  };\n\n  handleLocationChange = ({ currentTarget: input }) => {\n    const investorInformation = { ...this.state.investorInformation };\n    const { locations, lienCosts } = investorInformation;\n    const selectedLocation = JSON.parse(input.value);\n\n    locations[input.name] = selectedLocation;\n    lienCosts[input.name].avgLienCostLiveAuction =\n      selectedLocation.avgLienCostLiveAuction;\n    lienCosts[input.name].avgLienCostSecondary =\n      selectedLocation.avgLienCostSecondary;\n\n    this.setState({ investorInformation });\n  };\n\n  handleLienCostChange = ({ currentTarget: input }) => {\n    const pathParts = input.name.split(\".\");\n    const investorInformation = { ...this.state.investorInformation };\n    investorInformation.lienCosts[pathParts[0]][pathParts[1]] = input.value;\n    this.setState({ investorInformation });\n  };\n\n  handleSecondaryMarketChange = ({ currentTarget: input }) => {\n    const investorInformation = { ...this.state.investorInformation };\n    investorInformation.secondaryMarket = input.checked;\n    this.setState({ investorInformation });\n  };\n\n  handleExpenseChange = (value, expense) => {\n    let dealInformation = { ...this.state.dealInformation };\n    dealInformation.expenses[expense] = value;\n    this.setState({ dealInformation });\n  };\n\n  handleGrossRentChange = value => {\n    let dealInformation = { ...this.state.dealInformation };\n    dealInformation.avgGrossRent = value;\n    this.setState({ dealInformation });\n  };\n\n  handleRedemptionRatioChange = value => {\n    let dealInformation = { ...this.state.dealInformation };\n    dealInformation.redemptionRatio = value;\n    this.setState({ dealInformation });\n  };\n\n  handleServiceTypeChange = ({ currentTarget: input }) => {\n    let serviceType = { ...this.state.serviceType };\n\n    for (let key in serviceType) {\n      serviceType[key] = false;\n    }\n\n    serviceType[input.value] = true;\n    this.setState({ serviceType });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    console.log(this.state);\n  };\n\n  render() {\n    const { investorInformation, dealInformation, serviceType } = this.state;\n    const { location } = this.props;\n    const optionalParams = queryString.parse(location.search);\n\n    return (\n      <div>\n        <InputForm\n          investorInformation={investorInformation}\n          dealInformation={dealInformation}\n          serviceType={serviceType}\n          onChange={this.handleChange}\n          onNetRentPreferenceChange={this.handleNetRentPreferenceChange}\n          onLocationChange={this.handleLocationChange}\n          onLienCostChange={this.handleLienCostChange}\n          onSecondaryMarketChange={this.handleSecondaryMarketChange}\n          onRedemptionRatioChange={this.handleRedemptionRatioChange}\n          onExpenseChange={this.handleExpenseChange}\n          onGrossRentChange={this.handleGrossRentChange}\n          onServiceTypeChange={this.handleServiceTypeChange}\n          onSubmit={this.handleSubmit}\n        />\n        <p>{JSON.stringify(optionalParams)}</p>\n\n        <ResultsTable />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n\n// Outputs\n// Should be a schedule that can be viewed as years (aggregated values) or months\n// Should last 24 Months after Investment Goal is hit\n// PHase 2 Consideration --- people can pick fields to add to output.\n\n// Period\n// Date\n// Invetment Capital\n// Liens Purchased\n// Housed Acquired\n// Outstanding Debt\n// Passive Rental Income\n\n// *****************************\n// General Comments\n// *****************************\n// (1) Limiting Location Options: Instead of letting users pick any state\n// we will reduce this to a managed system where\n// iWealthRE's subject matter expertise is.\n\n// (2) Buying Location Preference: We should let users pick\n// their top three states.\n\n// (3) Research Time: If I get money in July, I can't spend it at a\n// live auction until August. This is because I need a minimum of\n// 1 month to do research on properties. (make this a variable)\n\n// (4) Lien cost on Secondary Market: Typical lien cost on the\n// secondary market is 1 year tax plus some premium. This is the\n// average redemptive value. Essentially, secondary buyers have to pay extra\n// for not having to wait for the lien to mature. An important note here,\n// when a person buys a lien on the seondary market their interest income\n// will not be on the redemptive value, rather it will be on the original\n// lien cost (which will be less than the redemptive cost).\n\n// (5) Tool should assume live auction.\n// -In which case we will show only the live auction lien vlaue\n// -next to state option drop down\n// -\n// -If user toggles secondary\n// -then we will only show them the secondary lien costs\n"]},"metadata":{},"sourceType":"module"}