{"ast":null,"code":"import { round } from \"../utils/NumberUtils\";\nexport default class Lien {\n  constructor(purchasedDate, investmentCycle, lienPurchasePlan, willBecomeHouse, nonHousePct) {\n    const location = lienPurchasePlan.location,\n          costPerLien = lienPurchasePlan.costPerLien,\n          secondaryMarket = lienPurchasePlan.secondaryMarket;\n    this.nonHousePct = nonHousePct;\n    this.purchaseDate = purchasedDate;\n    this.location = location;\n    this.purchasePrice = costPerLien;\n    this.investmentCycle = investmentCycle;\n    this.willBecomeHouse = willBecomeHouse;\n    this.secondaryMarket = secondaryMarket;\n    this.redemptionMonths = secondaryMarket ? 0 : this.location.redemptionMonths;\n    this.initializeForeclosureDates();\n    this.initializeAdminDates();\n    this.initializeBecomeHouseDate();\n    this.initializeRedemptionDate();\n    this.updateForeclosureDatesIfRedeemed();\n    this.interestRate = this.location.avgLienInterestRate / 100;\n  }\n\n  initializeForeclosureDates() {\n    if (this.location.foreclosureMonths > 0) {\n      // Start\n      this.foreclosureStartDate = new Date(this.purchaseDate);\n      this.foreclosureStartDate.setMonth(this.foreclosureStartDate.getMonth() + this.redemptionMonths); // End\n\n      this.foreclosureEndDate = new Date(this.foreclosureStartDate);\n      this.foreclosureEndDate.setMonth(this.foreclosureEndDate.getMonth() + this.location.foreclosureMonths);\n    } else {\n      this.foreclosureStartDate = null;\n      this.foreclosureEndDate = null;\n    }\n  }\n\n  initializeRedemptionDate() {\n    if (this.willBecomeHouse) {\n      this.redemptionDate = null;\n      return;\n    } // The following March\n\n\n    const nextMarch = new Date(this.purchaseDate.getFullYear() + 1, 2, 1); // Standard Redemption Date\n\n    let redemptionDate = new Date(this.purchaseDate);\n    redemptionDate.setMonth(redemptionDate.getMonth() + this.redemptionMonths); //  Max Redemption Date\n\n    let maxRedemptionDate = new Date(redemptionDate);\n\n    if (this.location.canRedeemInForeclosure) {\n      maxRedemptionDate.setMonth(maxRedemptionDate.getMonth() + this.location.foreclosureMonths);\n    } // Can we use the following march as a redemption period?\n\n\n    if (maxRedemptionDate > nextMarch) {\n      // Next march can be used as a redemption option\n      if (this.nonHousePct <= 1 / 3) {\n        // 1/3 redeem the following march\n        this.redemptionDate = new Date(nextMarch);\n      } else if (this.nonHousePct <= 2 / 3) {\n        // 1/3 redeem on the last month (before foreclosure starts)\n        this.redemptionDate = new Date(redemptionDate);\n      } else {\n        // 1/3 redeem after foreclosure is over\n        // Note: If redemption isn't allowed in foreclosure,\n        // these will just redeem at the same time as the bucket above.\n        // (i.e. month before foreclosure)\n        this.redemptionDate = new Date(maxRedemptionDate);\n      }\n    } else {\n      // Next march can not be used as a redemption option\n      if (this.nonHousePct <= 1 / 3) {\n        this.redemptionDate = new Date(redemptionDate);\n      } else {\n        this.redemptionDate = new Date(maxRedemptionDate);\n      }\n    }\n  }\n\n  updateForeclosureDatesIfRedeemed() {\n    if (this.redemptionDate < this.foreclosureStartDate) {\n      // This one won't make it to foreclosure get rid of these dates\n      this.foreclosureStartDate = null;\n      this.foreclosureEndDate = null;\n    }\n  }\n\n  initializeAdminDates() {\n    if (!this.willBecomeHouse) {\n      this.adminStartDate = null;\n      this.adminEndDate = null;\n      return;\n    }\n\n    if (this.location.adminMonths > 0) {\n      // Start\n      this.adminStartDate = new Date(this.purchaseDate);\n      this.adminStartDate.setMonth(this.adminStartDate.getMonth() + this.redemptionMonths + this.location.foreclosureMonths); // End\n\n      this.adminEndDate = new Date(this.adminStartDate);\n      this.adminEndDate.setMonth(this.adminEndDate.getMonth() + this.location.adminMonths);\n    } else {\n      this.adminStartDate = null;\n      this.adminEndDate = null;\n    }\n  }\n\n  initializeBecomeHouseDate() {\n    if (!this.willBecomeHouse) {\n      this.becomeHouseDate = null;\n      return;\n    }\n\n    const maxDate = Math.max(this.adminEndDate, this.foreclosureEndDate);\n    this.becomeHouseDate = new Date(maxDate);\n  }\n\n  calculateRedemptionIncome() {\n    if (this.willBecomeHouse) return 0;\n    const monthsHeld = Math.floor((this.redemptionDate - this.purchaseDate) / 1000 / 60 / 60 / 24 / 30); // Individuals have to pay back the legal fees for foreclosure\n    // as part of redemption if it happens in foreclosure.\n\n    let foreclosureCost = 0;\n\n    if (this.redemptionDate >= this.foreclosureStartDate) {\n      foreclosureCost = this.location.foreclosureCost;\n    }\n\n    if (this.secondaryMarket) {\n      const faceValue = this.purchasePrice / (1 + this.interestRate / 12) ** this.location.redemptionMonths;\n      return round(this.purchasePrice - faceValue + foreclosureCost + faceValue * (1 + this.interestRate / 12) ** monthsHeld, 2);\n    } else {\n      return round(foreclosureCost + this.purchasePrice * (1 + this.interestRate / 12) ** monthsHeld, 2);\n    }\n  } // Notes:\n  // (1) Principal and Ineterst is only paid on tax liens that do not become a house.\n  // (2) Redemption payouts are spread as follows.\n  //\n\n\n}","map":{"version":3,"sources":["/Users/reappdev/repos/iwealth-tax-lien-calculator/src/models/lien.jsx"],"names":["round","Lien","constructor","purchasedDate","investmentCycle","lienPurchasePlan","willBecomeHouse","nonHousePct","location","costPerLien","secondaryMarket","purchaseDate","purchasePrice","redemptionMonths","initializeForeclosureDates","initializeAdminDates","initializeBecomeHouseDate","initializeRedemptionDate","updateForeclosureDatesIfRedeemed","interestRate","avgLienInterestRate","foreclosureMonths","foreclosureStartDate","Date","setMonth","getMonth","foreclosureEndDate","redemptionDate","nextMarch","getFullYear","maxRedemptionDate","canRedeemInForeclosure","adminStartDate","adminEndDate","adminMonths","becomeHouseDate","maxDate","Math","max","calculateRedemptionIncome","monthsHeld","floor","foreclosureCost","faceValue"],"mappings":"AAAA,SAASA,KAAT,QAAsB,sBAAtB;AAEA,eAAe,MAAMC,IAAN,CAAW;AACxBC,EAAAA,WAAW,CACTC,aADS,EAETC,eAFS,EAGTC,gBAHS,EAITC,eAJS,EAKTC,WALS,EAMT;AAAA,UACQC,QADR,GACmDH,gBADnD,CACQG,QADR;AAAA,UACkBC,WADlB,GACmDJ,gBADnD,CACkBI,WADlB;AAAA,UAC+BC,eAD/B,GACmDL,gBADnD,CAC+BK,eAD/B;AAGA,SAAKH,WAAL,GAAmBA,WAAnB;AACA,SAAKI,YAAL,GAAoBR,aAApB;AACA,SAAKK,QAAL,GAAgBA,QAAhB;AACA,SAAKI,aAAL,GAAqBH,WAArB;AACA,SAAKL,eAAL,GAAuBA,eAAvB;AACA,SAAKE,eAAL,GAAuBA,eAAvB;AACA,SAAKI,eAAL,GAAuBA,eAAvB;AAEA,SAAKG,gBAAL,GAAwBH,eAAe,GACnC,CADmC,GAEnC,KAAKF,QAAL,CAAcK,gBAFlB;AAIA,SAAKC,0BAAL;AACA,SAAKC,oBAAL;AACA,SAAKC,yBAAL;AACA,SAAKC,wBAAL;AACA,SAAKC,gCAAL;AAEA,SAAKC,YAAL,GAAoB,KAAKX,QAAL,CAAcY,mBAAd,GAAoC,GAAxD;AACD;;AAEDN,EAAAA,0BAA0B,GAAG;AAC3B,QAAI,KAAKN,QAAL,CAAca,iBAAd,GAAkC,CAAtC,EAAyC;AACvC;AACA,WAAKC,oBAAL,GAA4B,IAAIC,IAAJ,CAAS,KAAKZ,YAAd,CAA5B;AACA,WAAKW,oBAAL,CAA0BE,QAA1B,CACE,KAAKF,oBAAL,CAA0BG,QAA1B,KAAuC,KAAKZ,gBAD9C,EAHuC,CAOvC;;AACA,WAAKa,kBAAL,GAA0B,IAAIH,IAAJ,CAAS,KAAKD,oBAAd,CAA1B;AACA,WAAKI,kBAAL,CAAwBF,QAAxB,CACE,KAAKE,kBAAL,CAAwBD,QAAxB,KAAqC,KAAKjB,QAAL,CAAca,iBADrD;AAGD,KAZD,MAYO;AACL,WAAKC,oBAAL,GAA4B,IAA5B;AACA,WAAKI,kBAAL,GAA0B,IAA1B;AACD;AACF;;AAEDT,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAKX,eAAT,EAA0B;AACxB,WAAKqB,cAAL,GAAsB,IAAtB;AACA;AACD,KAJwB,CAMzB;;;AACA,UAAMC,SAAS,GAAG,IAAIL,IAAJ,CAAS,KAAKZ,YAAL,CAAkBkB,WAAlB,KAAkC,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,CAAlB,CAPyB,CASzB;;AACA,QAAIF,cAAc,GAAG,IAAIJ,IAAJ,CAAS,KAAKZ,YAAd,CAArB;AACAgB,IAAAA,cAAc,CAACH,QAAf,CAAwBG,cAAc,CAACF,QAAf,KAA4B,KAAKZ,gBAAzD,EAXyB,CAazB;;AACA,QAAIiB,iBAAiB,GAAG,IAAIP,IAAJ,CAASI,cAAT,CAAxB;;AAEA,QAAI,KAAKnB,QAAL,CAAcuB,sBAAlB,EAA0C;AACxCD,MAAAA,iBAAiB,CAACN,QAAlB,CACEM,iBAAiB,CAACL,QAAlB,KAA+B,KAAKjB,QAAL,CAAca,iBAD/C;AAGD,KApBwB,CAsBzB;;;AACA,QAAIS,iBAAiB,GAAGF,SAAxB,EAAmC;AACjC;AACA,UAAI,KAAKrB,WAAL,IAAoB,IAAI,CAA5B,EAA+B;AAC7B;AACA,aAAKoB,cAAL,GAAsB,IAAIJ,IAAJ,CAASK,SAAT,CAAtB;AACD,OAHD,MAGO,IAAI,KAAKrB,WAAL,IAAoB,IAAI,CAA5B,EAA+B;AACpC;AACA,aAAKoB,cAAL,GAAsB,IAAIJ,IAAJ,CAASI,cAAT,CAAtB;AACD,OAHM,MAGA;AACL;AACA;AACA;AACA;AACA,aAAKA,cAAL,GAAsB,IAAIJ,IAAJ,CAASO,iBAAT,CAAtB;AACD;AACF,KAfD,MAeO;AACL;AACA,UAAI,KAAKvB,WAAL,IAAoB,IAAI,CAA5B,EAA+B;AAC7B,aAAKoB,cAAL,GAAsB,IAAIJ,IAAJ,CAASI,cAAT,CAAtB;AACD,OAFD,MAEO;AACL,aAAKA,cAAL,GAAsB,IAAIJ,IAAJ,CAASO,iBAAT,CAAtB;AACD;AACF;AACF;;AAEDZ,EAAAA,gCAAgC,GAAG;AACjC,QAAI,KAAKS,cAAL,GAAsB,KAAKL,oBAA/B,EAAqD;AACnD;AACA,WAAKA,oBAAL,GAA4B,IAA5B;AACA,WAAKI,kBAAL,GAA0B,IAA1B;AACD;AACF;;AAEDX,EAAAA,oBAAoB,GAAG;AACrB,QAAI,CAAC,KAAKT,eAAV,EAA2B;AACzB,WAAK0B,cAAL,GAAsB,IAAtB;AACA,WAAKC,YAAL,GAAoB,IAApB;AACA;AACD;;AAED,QAAI,KAAKzB,QAAL,CAAc0B,WAAd,GAA4B,CAAhC,EAAmC;AACjC;AACA,WAAKF,cAAL,GAAsB,IAAIT,IAAJ,CAAS,KAAKZ,YAAd,CAAtB;AACA,WAAKqB,cAAL,CAAoBR,QAApB,CACE,KAAKQ,cAAL,CAAoBP,QAApB,KACE,KAAKZ,gBADP,GAEE,KAAKL,QAAL,CAAca,iBAHlB,EAHiC,CASjC;;AACA,WAAKY,YAAL,GAAoB,IAAIV,IAAJ,CAAS,KAAKS,cAAd,CAApB;AACA,WAAKC,YAAL,CAAkBT,QAAlB,CACE,KAAKS,YAAL,CAAkBR,QAAlB,KAA+B,KAAKjB,QAAL,CAAc0B,WAD/C;AAGD,KAdD,MAcO;AACL,WAAKF,cAAL,GAAsB,IAAtB;AACA,WAAKC,YAAL,GAAoB,IAApB;AACD;AACF;;AAEDjB,EAAAA,yBAAyB,GAAG;AAC1B,QAAI,CAAC,KAAKV,eAAV,EAA2B;AACzB,WAAK6B,eAAL,GAAuB,IAAvB;AACA;AACD;;AAED,UAAMC,OAAO,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKL,YAAd,EAA4B,KAAKP,kBAAjC,CAAhB;AACA,SAAKS,eAAL,GAAuB,IAAIZ,IAAJ,CAASa,OAAT,CAAvB;AACD;;AAEDG,EAAAA,yBAAyB,GAAG;AAC1B,QAAI,KAAKjC,eAAT,EAA0B,OAAO,CAAP;AAE1B,UAAMkC,UAAU,GAAGH,IAAI,CAACI,KAAL,CACjB,CAAC,KAAKd,cAAL,GAAsB,KAAKhB,YAA5B,IAA4C,IAA5C,GAAmD,EAAnD,GAAwD,EAAxD,GAA6D,EAA7D,GAAkE,EADjD,CAAnB,CAH0B,CAO1B;AACA;;AACA,QAAI+B,eAAe,GAAG,CAAtB;;AACA,QAAI,KAAKf,cAAL,IAAuB,KAAKL,oBAAhC,EAAsD;AACpDoB,MAAAA,eAAe,GAAG,KAAKlC,QAAL,CAAckC,eAAhC;AACD;;AAED,QAAI,KAAKhC,eAAT,EAA0B;AACxB,YAAMiC,SAAS,GACb,KAAK/B,aAAL,GACA,CAAC,IAAI,KAAKO,YAAL,GAAoB,EAAzB,KAAgC,KAAKX,QAAL,CAAcK,gBAFhD;AAIA,aAAOb,KAAK,CACV,KAAKY,aAAL,GACE+B,SADF,GAEED,eAFF,GAGEC,SAAS,GAAG,CAAC,IAAI,KAAKxB,YAAL,GAAoB,EAAzB,KAAgCqB,UAJpC,EAKV,CALU,CAAZ;AAOD,KAZD,MAYO;AACL,aAAOxC,KAAK,CACV0C,eAAe,GACb,KAAK9B,aAAL,GAAqB,CAAC,IAAI,KAAKO,YAAL,GAAoB,EAAzB,KAAgCqB,UAF7C,EAGV,CAHU,CAAZ;AAKD;AACF,GAhLuB,CAkLxB;AACA;AACA;AACA;;;AArLwB","sourcesContent":["import { round } from \"../utils/NumberUtils\";\n\nexport default class Lien {\n  constructor(\n    purchasedDate,\n    investmentCycle,\n    lienPurchasePlan,\n    willBecomeHouse,\n    nonHousePct\n  ) {\n    const { location, costPerLien, secondaryMarket } = lienPurchasePlan;\n\n    this.nonHousePct = nonHousePct;\n    this.purchaseDate = purchasedDate;\n    this.location = location;\n    this.purchasePrice = costPerLien;\n    this.investmentCycle = investmentCycle;\n    this.willBecomeHouse = willBecomeHouse;\n    this.secondaryMarket = secondaryMarket;\n\n    this.redemptionMonths = secondaryMarket\n      ? 0\n      : this.location.redemptionMonths;\n\n    this.initializeForeclosureDates();\n    this.initializeAdminDates();\n    this.initializeBecomeHouseDate();\n    this.initializeRedemptionDate();\n    this.updateForeclosureDatesIfRedeemed();\n\n    this.interestRate = this.location.avgLienInterestRate / 100;\n  }\n\n  initializeForeclosureDates() {\n    if (this.location.foreclosureMonths > 0) {\n      // Start\n      this.foreclosureStartDate = new Date(this.purchaseDate);\n      this.foreclosureStartDate.setMonth(\n        this.foreclosureStartDate.getMonth() + this.redemptionMonths\n      );\n\n      // End\n      this.foreclosureEndDate = new Date(this.foreclosureStartDate);\n      this.foreclosureEndDate.setMonth(\n        this.foreclosureEndDate.getMonth() + this.location.foreclosureMonths\n      );\n    } else {\n      this.foreclosureStartDate = null;\n      this.foreclosureEndDate = null;\n    }\n  }\n\n  initializeRedemptionDate() {\n    if (this.willBecomeHouse) {\n      this.redemptionDate = null;\n      return;\n    }\n\n    // The following March\n    const nextMarch = new Date(this.purchaseDate.getFullYear() + 1, 2, 1);\n\n    // Standard Redemption Date\n    let redemptionDate = new Date(this.purchaseDate);\n    redemptionDate.setMonth(redemptionDate.getMonth() + this.redemptionMonths);\n\n    //  Max Redemption Date\n    let maxRedemptionDate = new Date(redemptionDate);\n\n    if (this.location.canRedeemInForeclosure) {\n      maxRedemptionDate.setMonth(\n        maxRedemptionDate.getMonth() + this.location.foreclosureMonths\n      );\n    }\n\n    // Can we use the following march as a redemption period?\n    if (maxRedemptionDate > nextMarch) {\n      // Next march can be used as a redemption option\n      if (this.nonHousePct <= 1 / 3) {\n        // 1/3 redeem the following march\n        this.redemptionDate = new Date(nextMarch);\n      } else if (this.nonHousePct <= 2 / 3) {\n        // 1/3 redeem on the last month (before foreclosure starts)\n        this.redemptionDate = new Date(redemptionDate);\n      } else {\n        // 1/3 redeem after foreclosure is over\n        // Note: If redemption isn't allowed in foreclosure,\n        // these will just redeem at the same time as the bucket above.\n        // (i.e. month before foreclosure)\n        this.redemptionDate = new Date(maxRedemptionDate);\n      }\n    } else {\n      // Next march can not be used as a redemption option\n      if (this.nonHousePct <= 1 / 3) {\n        this.redemptionDate = new Date(redemptionDate);\n      } else {\n        this.redemptionDate = new Date(maxRedemptionDate);\n      }\n    }\n  }\n\n  updateForeclosureDatesIfRedeemed() {\n    if (this.redemptionDate < this.foreclosureStartDate) {\n      // This one won't make it to foreclosure get rid of these dates\n      this.foreclosureStartDate = null;\n      this.foreclosureEndDate = null;\n    }\n  }\n\n  initializeAdminDates() {\n    if (!this.willBecomeHouse) {\n      this.adminStartDate = null;\n      this.adminEndDate = null;\n      return;\n    }\n\n    if (this.location.adminMonths > 0) {\n      // Start\n      this.adminStartDate = new Date(this.purchaseDate);\n      this.adminStartDate.setMonth(\n        this.adminStartDate.getMonth() +\n          this.redemptionMonths +\n          this.location.foreclosureMonths\n      );\n\n      // End\n      this.adminEndDate = new Date(this.adminStartDate);\n      this.adminEndDate.setMonth(\n        this.adminEndDate.getMonth() + this.location.adminMonths\n      );\n    } else {\n      this.adminStartDate = null;\n      this.adminEndDate = null;\n    }\n  }\n\n  initializeBecomeHouseDate() {\n    if (!this.willBecomeHouse) {\n      this.becomeHouseDate = null;\n      return;\n    }\n\n    const maxDate = Math.max(this.adminEndDate, this.foreclosureEndDate);\n    this.becomeHouseDate = new Date(maxDate);\n  }\n\n  calculateRedemptionIncome() {\n    if (this.willBecomeHouse) return 0;\n\n    const monthsHeld = Math.floor(\n      (this.redemptionDate - this.purchaseDate) / 1000 / 60 / 60 / 24 / 30\n    );\n\n    // Individuals have to pay back the legal fees for foreclosure\n    // as part of redemption if it happens in foreclosure.\n    let foreclosureCost = 0;\n    if (this.redemptionDate >= this.foreclosureStartDate) {\n      foreclosureCost = this.location.foreclosureCost;\n    }\n\n    if (this.secondaryMarket) {\n      const faceValue =\n        this.purchasePrice /\n        (1 + this.interestRate / 12) ** this.location.redemptionMonths;\n\n      return round(\n        this.purchasePrice -\n          faceValue +\n          foreclosureCost +\n          faceValue * (1 + this.interestRate / 12) ** monthsHeld,\n        2\n      );\n    } else {\n      return round(\n        foreclosureCost +\n          this.purchasePrice * (1 + this.interestRate / 12) ** monthsHeld,\n        2\n      );\n    }\n  }\n\n  // Notes:\n  // (1) Principal and Ineterst is only paid on tax liens that do not become a house.\n  // (2) Redemption payouts are spread as follows.\n  //\n}\n"]},"metadata":{},"sourceType":"module"}